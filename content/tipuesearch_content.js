var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 協同產品設計實習 - Collaborative Product Design Practice\xa0 \n 2a第四組網站： https://mdecd2025.github.io/2a-ag4/ \n 2a or 2b 第幾組倉儲: 2a-第四組( ag4 ) \n \n 課程代號: cd2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n \n 課程評分: \n Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單 \n Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單 \n Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單', 'tags': '', 'url': 'About.html'}, {'title': 'w3', 'text': '2a 學員作業網站與倉儲連結 \n 2b 學員作業網站與倉儲連結 \n 2a 分組網站與倉儲連結 \n 2b 分組網站與倉儲連結 \n 2a未加入團隊學員 \n 2b未加入團隊學員 \n', 'tags': '', 'url': 'w3.html'}, {'title': 'task', 'text': '每週任務相關內容整理如下： \n task1 與 task2 任務目的在建立可於近端維護個人作業與協同作業的準備工作： \n task1 (自行製作可攜程式系統) \n task2 (使用 SSH 協定執行作業倉儲的推送) \n task3 與 task4 則為 HW2 的內容之一 \n task3 (使用 Solvespace 建立平面四連桿系統零組件) \n task4 (使用 Onshape 建立平面四連桿系統零組件) \n task5 與 task6 則為 HW3 的主要內容 \n task5 (Webots Tutorial 1 ~3) \n task6 (Webots Tutorial 4 ~6)', 'tags': '', 'url': 'task.html'}, {'title': 'task1', 'text': '', 'tags': '', 'url': 'task1.html'}, {'title': 'task2', 'text': '', 'tags': '', 'url': 'task2.html'}, {'title': 'task3', 'text': '', 'tags': '', 'url': 'task3.html'}, {'title': 'task4', 'text': '', 'tags': '', 'url': 'task4.html'}, {'title': 'task5', 'text': '1.請用繁體中文詳細說明下列資料:  https://cyberbotics.com/doc/guide/introduction-to-webots\xa0 \n 2.請整理網頁中重要的英文單字與用法, 並且針對其中所使用的英文文法逐句說明. \n 3.請摘要出下列內容: (放入英文文章內容) \n \n \n What is Webots?  Webots is a professional mobile robot simulation software that provides a rapid prototyping environment. It allows users to create 3D virtual worlds with physics properties (e.g., mass, joints, friction) and add passive or active objects like mobile robots. Users can equip robots with sensors and actuators and program them for desired behaviors. It offers numerous robot models, examples, and interfaces to transfer simulations to real robots like e-puck or Nao. \n \n \n \n What can I do with Webots?  Webots is ideal for research and education in mobile robotics, supporting projects like robot prototyping (e.g., academic, automotive, toy industries), locomotion research (legged, humanoid robots), multi-agent studies (swarm intelligence, collaborative robots), and adaptive behavior research (genetic algorithms, AI). It’s also used for teaching robotics and robot competitions. \n \n \n \n What do I need to know to use Webots?  Basic knowledge of C, C++, Java, Python, or MATLAB is required to program controllers, though beginners can use the graphical BotStudio language for certain robots (e.g., e-puck). To create custom models or environments, familiarity with 3D graphics and VRML97 is needed for designing or importing 3D objects. \n \n \n \n How do I get User Support?  Cyberbotics offers paid support via Premier Service plans and custom development. Community-based support is available through Robotics StackExchange (webots tag), GitHub Discussions (development questions), GitHub Issues (bug reports), and Discord (quick discussions), though responses aren’t guaranteed. \n \n \n \n Webots Simulation  A Webots simulation consists of a world file (.wbt) defining robots and their environment, controller programs (in C/C++/Java/Python/MATLAB), and an optional physics plugin (in C/C++) to adjust physics behavior. World files may rely on external PROTO files and textures. \n \n \n \n What is a World?  A "world" in Webots is a 3D description of robots and their environment, detailing properties like position, geometry, appearance, and physics. Organized hierarchically (like VRML97), world files (.wbt) specify controller names but don’t include the controller code itself. \n \n \n \n What is a Controller?  A controller is a program that directs a robot in a world file, written in C, C++, Java, Python, or MATLAB. Webots launches each controller as a separate process per robot at simulation start. Some languages require compilation (e.g., C/C++), others interpretation (e.g., Python), with files stored in the "controllers" subdirectory. \n \n \n \n What is a Supervisor Controller?  A supervisor controller, tied to a robot with its "supervisor" field set to TRUE, can perform privileged actions (e.g., simulation control, moving robots, recording videos) typically reserved for human operators. Written in any supported language, it has greater capabilities than standard controllers. \n \n \n \n 4.請列出上述文章中的重要的英文單字與解釋, 以及出現在文句中的用法: \n 5.請詳細說明如何採手動方式在 Webots 建立下列場景: \n 6.希望可以手把手一步步說明該如何利用圖形介面 menu 建立這個場景, 過程中有那些要點必須特別注意?', 'tags': '', 'url': 'task5.html'}, {'title': 'task6', 'text': '', 'tags': '', 'url': 'task6.html'}, {'title': 'list', 'text': '網站： \n 41223118： https://mdecd2025.github.io/hw-zhe41223118/ \n 41223122： https://mdecd2025.github.io/hw-Spirit0224/ \n 41223131： https://mdecd2025.github.io/hw-yuhao-08/ \n 41223134： https://mdecd2025.github.io/hw-41223134 \n 41223136： https://mdecd2025.github.io/hw-41223136/ \n 41223158： https://mdecd2025.github.io/hw-41223158 \n \n 倉儲： \n 41223118： https://github.com/mdecd2025/hw-zhe41223118 \n 41223122： https://github.com/mdecd2025/hw-Spirit0224 \n 41223131： https://github.com/mdecd2025/hw-yuhao-08 \n 41223134： https://github.com/mdecd2025/hw-41223134 \n 41223136： https://github.com/mdecd2025/hw-41223136 \xa0 \n 41223158： https://github.com/mdecd2025/hw-41223158 \n \n Brython-列出組員倉儲及網站 連結 \n from browser import html, document, window\n  \n# 定義資料來源 URL\nurl = "https://mde.tw/list/2a.txt"\n  \n# 定義要查找的學號列表\ntarget_ids = ["41223118", "41223122", "41223131", "41223134", "41223136", "41223158"]\n  \n# 顯示學員數量\nprint("正在處理...")\n  \n# 取得 HTML 中的元素 id 為 "brython_div1"\nbrython_div1 = document["brython_div1"]\n  \n# 使用 JavaScript 的 fetch API 來抓取資料\ndef process_data(response_text):\n    # 將抓取到的資料分行\n    data = response_text.splitlines()\n  \n    # 跳過標題行，取得學員資料\n    all_stud = data[1:]\n  \n    # 逐行處理學員資料\n    for stud in all_stud:\n        # 假設學員資料的格式為 "學號 學員賬號"\n        student_info = stud.strip().split()  # 使用 split() 將每行分為學號和帳號\n        if len(student_info) == 2:  # 確保每行有學號和帳號\n            student_id = student_info[0].strip()  # 學號\n            student_account = student_info[1].strip()  # 學員賬號\n  \n            # 檢查學號是否在目標學號列表中\n            if student_id in target_ids:\n                # 創建 GitHub 和作業網站的超鏈接\n                github_link = f"https://github.com/mdecd2025/hw-{student_account}"\n                homework_link = f"https://mdecd2025.github.io/hw-{student_account}/"\n                  \n                # 顯示該學號的 GitHub 和作業網站\n                brython_div1 <= html.A(student_id, href=github_link)  # 學號是 GitHub repo 連結\n                brython_div1 <= " "  # 空格\n                brython_div1 <= html.A("(repo)", href=homework_link)  # 作業網站的超鏈接標題為 (repo)\n                brython_div1 <= html.BR()  # 換行\n  \n# 使用 JavaScript 的 fetch API 拉取資料\nwindow.fetch(url).then(lambda response: response.text()).then(process_data)\n \n', 'tags': '', 'url': 'list.html'}, {'title': 'Final', 'text': '期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:  Webots 動態投籃模擬系統的協同設計 \n 說明:  \n 籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上. \n 操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止. \n 請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中. \n 影片標題:  國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題 \n', 'tags': '', 'url': 'Final.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};