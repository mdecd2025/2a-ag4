var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 協同產品設計實習 - Collaborative Product Design Practice\xa0 \n 2a第四組網站： https://mdecd2025.github.io/2a-ag4/ \n 2a or 2b 第幾組倉儲: 2a-第四組( ag4 ) \n 小組近端維護連結： ag4_組長連結 \n \n 課程代號: cd2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n \n 課程評分: \n Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單 \n Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單 \n Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單', 'tags': '', 'url': 'About.html'}, {'title': 'Tutorial', 'text': '硬體需求: \n 2 GHz 4 核心以上 CPU, NVIDIA 或 AMD 支援 OpenGL 3.3 版, 帶有 512 MB 記憶體以上獨立顯示卡 \n 操作系統： \n Windows 10 或 11 64 位元操作系統 \n Ubuntu 24.04 以上版本 \n macOS 12 以上版本操作系統 \n 介面： \n 可以透過 Tools - Preferences - Language 中選擇使用 English  (目前無繁體中文介面，介面語系翻譯請參考\xa0 translations 頁面 說明) \n 版本差異： \n 每一版本都有些微差異，cd2025 將使用\xa0 R2025a \xa0(課程過程發現 Webots 2025a 有不少 bugs，其中包括操作過程閃退以及無法使用 Transform 節點，因此可以換為\xa0 Webots_2023b.7z \xa0 版 ) \n 原始碼使用授權： \n 採 \xa0 Apache 2.0 license agreement . Apache 2.0 是一種開放且對企業友善的授權條款，允許任何人免費使用、修改和分享軟體的原始程式碼，包括商業用途使用 \n 自行編譯 Webots 請參考 \xa0 building Webots 頁面 說明 \n Webots 套件中的大部分範例模擬檔案都使用 Apache 2.0 許可釋出，但有部分機器人和物件模型 （proto 檔案） 則是根據 \xa0 Webots 資產的開放原始碼許可協議 發佈，另外有些範例則是由用戶根據不同的開源許可證所提供，這些檔案都會明確標示其許可證內容 \n Webots 大綱介紹： \n 整理內容以在w2週時，經各組員分配後統整至網站的  task5  頁面\xa0 \n Webots 場景中包含以下定義： \n \n 物件所在位置 \n 物件的外形 \n 物件如何互動 \n 天空的顏色 \n 地心引力的定義 \n 摩擦力 \n 物件的質量 \n 模擬的起始條件 \n 其他有關模擬的設定等 \n \n', 'tags': '', 'url': 'Tutorial.html'}, {'title': 'Tutorial1', 'text': '電子冰球機器人： \n \n RectangleArena \xa0 場景樹中的節點，打開節點並顯示其字段。\xa0(雙點擊各節點可以帶出其特定的欄位) \n Add 按鈕。 在開啟的對話方塊中選擇\xa0 PROTO nodes (Webots Projects) / objects / factory / containers / WoodenBox (Solid) ，競技場中央應該會出現一個大箱子 \n 選擇場景樹視圖的最後一個節點。按一下場景樹視圖頂部的 Add 按鈕， 在對話框中選擇\xa0 PROTO nodes (Webots Projects) / robots / gctronic / e-puck / E-puck (Robot) ，電子冰上曲棍球機器人會出現在競技場的中央，移動並旋轉這個機器人，就像移動和旋轉盒子一樣，儲存模擬並按下 Run real-time 按鈕 \n', 'tags': '', 'url': 'Tutorial1.html'}, {'title': 'Tutorial2', 'text': '導引課程 2：修改環境 \n \n 學習修改地板： \n \n 內定的 RectangleArena PROTO 定義了一個簡單的地板，固定在靜態環境中，沒有物理節點，四周則被牆壁包圍。Webots 物件庫中還有其他預製的地板。我們現在將刪除 RectangleArena 節點，並添加一個簡單的地板，在場景樹視圖當中選擇並展開Floor。 修改size字段其調整為1mx1m。 \n \xa0\xa0\xa0\xa0\xa0\xa0 2.了解Solid節點的應用： \n Solid \xa0 節點代表剛體，即可以忽略變形的物體。剛體中任意兩點之間的距離無論外力如何作用，都保持恆定。例如桌子、機器人手指骨節或輪子都是剛體。軟體和關節物體不是剛體。例如繩子、輪胎、海綿或關節機器人手臂都不是剛體。然而，一個關節實體可以被分解成若干剛體。 \n \xa0\xa0\xa0\xa0\xa0\xa0 3.DEF-USE機制： \n DEF-USE 機制允許在一個地方定義一個節點，並在場景樹的其他地方重用該定義。這對於避免在世界文件中重複相同的節點非常有用。此外，它還允許用戶同時修改多個對象。其工作原理如下：首先使用 DEF 字符串標記一個節點。然後可以使用 USE 關鍵字在其他地方重用該節點的副本。只有 DEF 節點的字段可以編輯，USE 節點的字段繼承自 DEF 節點，無法更改。此機制依賴於世界文件中節點的順序。DEF 節點應在任何相應的 USE 節點之前定義。 \n 以下是影片： \n \n 因為後續軟體跳掉下面是後續結果： \n \n', 'tags': '', 'url': 'Tutorial2.html'}, {'title': 'task', 'text': '每週任務相關內容整理如下： \n task1 與 task2 任務目的在建立可於近端維護個人作業與協同作業的準備工作： \n task1 (自行製作可攜程式系統) \n task2 (使用 SSH 協定執行作業倉儲的推送) \n task3 與 task4 則為 HW2 的內容之一 \n task3 (使用 Solvespace 建立平面四連桿系統零組件) \n task4 (使用 Onshape 建立平面四連桿系統零組件) \n task5 與 task6 則為 HW3 的主要內容 \n task5 (Webots Tutorial 1 ~3) \n task6 (Webots Tutorial 4 ~6) \n', 'tags': '', 'url': 'task.html'}, {'title': 'task1', 'text': '利用既有的 Python 可攜系統建立各版本的 Python 可攜環境。 \n 1.\xa0 下載\xa0 portable_python311.7z ， 一套尚未安裝 pip 的 Python 3.11 可攜程式環境。 \n 2.\xa0 目錄中的 start_ipv6.bat 啟動可攜系統， 接著修改 start_ipv6.bat，利用 Search - Replace，Find 欄位填上 Python311，Replace 欄位填上 Python313 後，按下 Replace All，便可將啟動檔中所有 Python311 設定改為 Python313，另存修改後的檔案為 start_python313.bat。 \n 3.\xa0 以 stop.bat 關閉 start_ipv6.bat 開啟的可攜系統，改以心建立的 start_python313.bat 開啟可攜環境，之後在命令列輸入 python，確認目前的 Python 版本為 3.13.2 後，利用 Ctrl + z 退出 Python 後，利用 pip list 確認目前的 Python 3.13.2 系統尚未配置 pip 模組管理工具。 \n 4.\xa0 在命令列中，以 python get-pip.py 安裝 pip 工具，完成後，以 pip list 確認 pip.exe 已經配置完成。 \n 5.  最後在命令列中，以 pip install flask flask_cors bs4 lxml pelican markdown 安裝 cmsimde 網際內容管理系統啟動所需的 Python 模組後，此可攜系統中的 Python 3.13.2 套件已經可以用來維護個人作業倉儲與分組倉儲。 \n 之後利用新版的 \xa0 SciTE ， Portablegit ， PUTTY , \xa0 ShareX ， Wink ， Solvespace ， Zoomit ， ProcessExplorer \xa0 \n 以及原有的 tmp 及 home_ipv6，將以新的 start_python313 啟動。 \n python版本更新影片 ： \n \n *此影片後半幾點未完成 \n', 'tags': '', 'url': 'task1.html'}, {'title': 'task2', 'text': '1. 設定 Git 使用 PuTTY \n [remote "origin"]\n    url = git@mysession:用戶名/倉儲名.git\n    fetch = +refs/heads/*:refs/remotes/origin/*\n \n set GIT_SSH=Y:\\putty\\plink.exe\n \n 2. 用 PuTTYgen 產生金鑰 \n \n \n \n 開啟  puttygen.exe \n \n \n 點【Generate】，移動滑鼠產生金鑰 \n \n \n 複製上方的 Public Key 到 GitHub > Settings > SSH and GPG keys \n \n \n 點【Save private key】，儲存為  Y:\\myprivatekey.ppk \n \n \n 3.\xa0建立 SSH Session（mysession） \n \n \n \n 開啟  putty.exe \n \n \n Host Name 輸入： github.com \n \n \n Session 名稱輸入： mysession ，點【Save】 \n \n \n 4.\xa0設定 Session 的私鑰 \n \n \n \n 在 PuTTY 載入  mysession \n \n \n 左側：Connection > SSH > Auth，選擇  Y:\\myprivatekey.ppk \n \n \n 回到 Session 再次【Save】 \n \n \n 5.\xa0匯出 Session 設定（可攜使用） \n \n \n \n regedit  打開登錄編輯器 \n \n \n 匯出  mysession  設定為  mysession.reg \n \n \n 6.\xa0設定 Git 倉儲 URL \n [remote "origin"]\n    url = git@mysession:用戶名/倉儲名.git\n    fetch = +refs/heads/*:refs/remotes/origin/* \n 最後完成推送： \n git push origin main \n \n 過程影片： \n \n \n \n \n', 'tags': '', 'url': 'task2.html'}, {'title': 'task3', 'text': '使用 Solvespace 建立 平面四連桿 系統零組件： \n 41223118  下載檔案： 41223118_fourbar_slvs.7z \n \xa0 \xa0 \xa0 \xa0  零件繪製影片： \n \n \n 41223122 下載檔案： /downloads/41223122slvs.7z \n \xa0 \xa0 \xa0 \xa0 \xa0 零件繪製影片： \n \n 41223136 \n 下載檔案： 41223136_fourbar_slvs.7z \n 1~4零件 \n \n 5~7零件 \n \n \n 其結果七段顯示數字顯示內容與Exam3-2相似，可以參考 這個頁面 或下載\xa0 Exam3-2.7z \xa0。 \n \n \n 41223158 \n 下載檔案 :\xa0 /downloads/fourbar41223158_slvs.zip \n \n \n', 'tags': '', 'url': 'task3.html'}, {'title': 'w3', 'text': '2a 學員作業網站與倉儲連結 \n 2b 學員作業網站與倉儲連結 \n 2a 分組網站與倉儲連結 \n 2b 分組網站與倉儲連結 \n 2a未加入團隊學員 \n 2b未加入團隊學員 \n', 'tags': '', 'url': 'w3.html'}, {'title': 'Exam3', 'text': '快速瀏覽 ： \n Exam3-1 ： \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0  41223118 、 41223122 、41223131、 41223134 、 41223136 、41223158 \n Exam3-2 ： \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0  41223118 、 41223122 、41223131、41223134、 41223136 、41223158 \n Exam3-3 ： \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0  41223118 、 41223122 、41223131、 41223134 、 41223136 、41223158 \n reflections ： \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0  41223118 、 41223122 、 41223131 、 41223134 、 41223136 、 41223158 \n \n 由各組組員將所完成的影片與心得整理在個人作業網站中的此頁面後，再逐一利用組員的帳號權限，將個人心得與 Exam3  完成影片，統一放入分組網站中的本頁面中 \n 組員應用檔案： \n 防火牆設定： set_firewall_ports_1000_2000_8000_9000.7z \n Exam3-2 七段器webots模擬程式： /downloads/three_digit_counter.7z \n \xa0Exam3-2 七段器顯示全學號： 41223118-Ex...m3-2-w14.7z \n \n Exam3-1.7z \xa0(HW1四連桿) \n Exam3-2.7z \xa0(七段顯示器) \n Exam3-2-w14.7z \xa0(完整版學號) \n 可攜所需下載 python 程式庫： \n pip install keyboard  (鍵盤控制) \n pip install websocket-server  (伺服器) \n pip install websocket-client  (客戶端) \n 在可攜的  .bat  啟動端內還需將 Webots 內建的動態連結程式庫納入： \n set WEBOTS_HOME=%Disk%:\\Webots_2023b \n \n set PYTHONPATH=%Disk%:\\Python313\\DLLs;%Disk%:\\Python313\\Lib;%Disk%:\\Python313\\Lib\\site-packages;%Disk%:\\NX\\NXBIN\\python;%Disk%:\\Webots_2023b\\msys64\\mingw64\\bin;%Disk%:\\Webots_2023b\\lib\\controller\\python; \n 以上條件皆具備後，以  webotsw --stream  啟動webots串流： \n 啟動順序-先 Run simulation  (暫停和歸零) ，執行  server ，然後再執行  client  後進行控制 \n \n 如不想手動新增，請於網站 w10週 下載最新版可攜程式，又或者clone下方.bat程式內容 \n @echo off\nset Disk=y\nsubst %Disk%: "data"\n\n%Disk%:\n\nset HomePath=%Disk%:\\home_ipv6\nset HomeDrive=%Disk%:\\home_ipv6\nset Home=%Disk%:\\home_ipv6\nset USERPROFILE=%Disk%:\\home_ipv6\n\nREM 將系統 Python 程式的 io 設為 utf-8\nset PYTHONIOENCODING="utf-8"\n\nset PYTHONPATH=%Disk%:\\Python313\\DLLs;%Disk%:\\Python313\\Lib;%Disk%:\\Python313\\Lib\\site-packages;%Disk%:\\NX\\NXBIN\\python;%Disk%:\\Webots_2023b\\msys64\\mingw64\\bin;%Disk%:\\Webots_2023b\\lib\\controller\\python;\nset PYTHONHOME=%Disk%:\\Python313\nREM for Webots\nset PYTHON_PATH=%Disk%:\\Python313\nset WEBOTS_HOME=%Disk%:\\Webots_2023b\n\nREM for putty\nset GIT_SSH=%Disk%:\\PuTTY\\plink.exe\n\nREM for Java and Android SDK\nset java_home=%Disk%:\\java\\jdk8u222-b10\nset ANDROID_SDK_home=%Disk%:\\home_ipv6\nset GRADLE_USER_home=%Disk%:\\home_ipv6\nset ANDROID_SDK_ROOT=%Disk%:\\android\\sdk\nset ANDROID_Home=%Disk%:\\android\\sdk\nset REPO_OS_OVERRIDE=windows\n\nREM 設定跟 Python 有關的命令搜尋路徑\nset path_python=%Disk%:\\Python313;%Disk%:\\Python313\\Scripts;\nREM 設定跟Git 有關的命令搜尋路徑\nset path_git=%Disk%:\\portablegit\\bin;\nREM 設定 msys2 64 位元的執行路徑\nREM %Disk%:\\msys64\\mingw64\\bin is for GD library\nset path_msys2=%Disk%:\\msys64\\ucrt64\\bin;%Disk%:\\msys64\\mingw64\\bin;\nREM set for LaTeX\nset path_miketex=%Disk%:\\miktex-portable\\texmfs\\install\\miktex\\bin\\x64;\nREM Flutter path\nset path_flutter=%Disk%:\\flutter\\bin;%java_home%\\bin;%Disk%:\\Android\\sdk;%Disk%:\\Android\\sdk\\tools;%Disk%:\\Android\\sdk\\tools\\bin;%Disk%:\\Android\\sdk\\emulator;%Disk%:\\Android\\sdk\\platform-tools;%Disk%:\\flutter\\bin\\cache\\dart-sdk\\bin;%Disk%:\\vscode;\nset path_node=%Disk%:\\node-v14.15.4-win-x64;\n\nset path_postgresql=%Disk%:\\postgresql13\\bin;\nset path_range=%Disk%:\\Range3_official\\bin;\nrem set path_range=%Disk%:\\range-3.2.5_kmol\\bin;\nset path_lua=%Disk%:\\lua-5.3.5\\;\nset path_core=%Disk%:\\coreutils-5.3.0\\bin;\nREM for gogs\nset path_putty=%Disk%:\\PuTTY;\nset path_vscode=%Disk%:\\vscode;\n\nREM for Rust\nset MINGW_PATH=%path_msys2%;\nset GIT_PATH=%path_git%;\nset VSCODE_PATH=%path_vscode%\nset RUSTUP_HOME=%Disk%:\\Rust\\rust\nset CARGO_HOME=%Disk%:\\Rust\\cargo\nset RUST_PATH=%CARGO_HOME%\\bin\n\nREM for Erlang and Elixir\nset path_erlang=%Disk%:\\elixir\\erl10.7\\bin\\;%Disk%:\\elixir\\erl10.7\\erts-10.7\\bin;%Disk%:\\elixir\\elixir\\bin;\nset ERTSPATH=%Disk%:\\elixir\\erl10.7\\erts-10.7\\bin\nset ERLINI=%Disk%:\\elixir\\erl10.7\\erts-10.7\\bin\\erl.ini\n\nREM for Haskell\nset path_haskell=%Disk%:\\ghc-9.0.1-x86_64-unknown-mingw32\\bin;\nREM for node.js\nset path_nodejs=%Disk%:\\node-v14.17.2-x64\\nodejs;%Disk%:\\node-v14.17.2-x64\\nodejs\\node_modules\\npm;\n\nREM 加入 PostgreSQL 所需的環境變數設定\n\n@SET PGDATA=%Disk%:\\postgresql13\\data\n@SET PGDATABASE=postgres\n@SET PGUSER=postgres\n@SET PGPORT=5432\n@SET PGLOCALEDIR=%Disk%:\\postgresql13\\share\\locale\n\nREM for Range3\nREM REG IMPORT %Disk%:\\range3.reg\n\nREM proxy needed for heroku login\nREM proxy can not use with fossil scm\nREM proxy can not use with Rust installation\nREM needed for node.js\nREM set HTTP_PROXY=http://[2001:288:6004:xx::42]:3128\nREM set HTTPS_PROXY=http://[2001:288:6004:xx::42]:3128\n\nREM for PyRep\nset VREP_PATH=%Disk%:\\CoppeliaSim\n\nREM BOOST_ROOT for compiling coppeliasim but maybe not for linking\nREM set BOOST_ROOT=%Disk%:\\boost_1_76_0\\;\nset path_copsim=%Disk%:\\boost_1_76_0\\;%Disk%:\\Strawberry\\perl\\bin;%Disk%:\\cmake-3.21.0-windows-x86_64\\bin;%Disk%:\\diffutils-2.8.7-1\\bin;%Disk%:\\patch-2.5.9-7\\bin;%D%:\\jom_1_1_2;%Disk%:\\LLVM\\bin;%Disk%:\\QtCreator\\bin;%Disk%:\\CoppeliaSimEdu;%Disk%:\\Python313\\tcl\\tcl8.6;\n\nREM for CMake\nset CMAKE_C_COMPILER=%Disk%:\\msys64\\ucrt64\\bin\\gcc;\nset CMAKE_CXX_COMPILER=%Disk%:\\msys64\\ucrt64\\bin\\g++;\n\nREM set QT_QPA_PLATFORM_PLUGIN_PATH=Y:\\msys64_20240507\\mingw64\\share\\qt5\\plugins\\platforms\nREM set QT_PLUGIN_PATH=Y:\\msys64_20240507\\mingw64\\share\\qt5\\plugins\n\nREM for execute scite directly\nset path_scite=%Disk%:\\wscite\\;\n\nREM for simExtZMQ\nset path_xsltproc=%Disk%:\\xsltproc;\n\nREM for OpenSSL\nSet OPENSSL_CONF=%Disk%:\\OpenSSL-Win64\\SSL\\openssl.cnf\nset path_openssl=%Disk%:\\OpenSSL-Win64\\bin;\n\nREM for textract\nset path_poppler=%Disk%:\\poppler-24.07.0\\Library\\bin;\n\nREM for tiny C compiler\nset path_tcc=%Disk%:\\tcc;\n\nREM for webots\nset  path_webots=%Disk%:\\Webots_2023b\\msys64\\mingw64\\bin;%Disk%:\\Webots_2023b\\msys64\\usr\\bin\n\nREM for blender\nset path_blender=%Disk%:\\Blender 4.2;\n\npath=%Disk%:;%path_python%;%path_git%;%path_copsim%;%path_msys2%;%path_miketex%;%path_flutter%;%path_node%;%path_tcc%;%path_postgresql%;%path_range%;%path_lua%;%path_core%;%path_putty%;%path_vscode%;%RUST_PATH%;%path_erlang%;%path_nodejs%;%path_haskell%;%path_scite%;%path_xsltproc%;%path_gnuplot%;%path_openssl%;%path_poppler%;%path_webots%;%path_blender%;%path%;\n\nREM for NX2312, must after path setup \nset SPLM_LICENSE_SERVER=29000@your_server\nset UGII_LANG=english\nset UGS_LICENSE_BUNDLE=ACD11,ACD10\nset UGII_BASE_DIR=%Disk%:\\NX\\\nset UGII_TMP_DIR=%Disk%:\\NX\\temp\nset UGII_LIB_PATH=%Disk%:\\NX\\NXBIN\\python\nset ugii=%Disk%:\\NX\\ugii;%Disk%:\\NX\\nxbin;\npath = %ugii%;%path%\nREM Xcopy %Disk%:\\home_ipv6\\AppData\\Local\\Siemens\\NX2312 C:\\users\\%USERNAME%\\AppData\\Local\\Siemens\\NX2312 /E /H /C /I /Y\n\nREM start ugraf -nx\n\nREM python %Disk%:\\tmp\\nx_ex\\new_part.py\n\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\n\nstart /MIN %Disk%:\\wscite\\SciTE.exe\nstart /MIN %Disk%:\\wscite\\SciTE.exe\n\nREM start webotsw.exe\n\n\nExit\n \n \xa0 \n \n', 'tags': '', 'url': 'Exam3.html'}, {'title': '3-1 video', 'text': 'Exam3-1 \n 41223118 ： \n \n \n 41223122 ： \n \n \n 41223131 ： \n \n \n 41223134 ： \n \n \n 41223136 ： \n \n \n 41223158 ： \n', 'tags': '', 'url': '3-1 video.html'}, {'title': '3-2 video', 'text': 'Exam3-2 41223118 ： 41223122 ： 41223131 ： 41223134 ： 41223136 ： 41223158 ：', 'tags': '', 'url': '3-2 video.html'}, {'title': '3-3 video', 'text': 'Exam3-3 \n 41223118 ： \n \n \n 41223122 ： \n \n \n 41223131 ： \n \n \n 41223134 ： \n \n \n 41223136 ： \n \n \n 41223158 ： \n', 'tags': '', 'url': '3-3 video.html'}, {'title': 'reflections', 'text': '41223118 ： \n 過程最為反覆的可能是\xa0 webotsw --steam \xa0 啟動webots的串流，確認可攜啟動端是否有加入Webots 內建的動態連結程式庫，然後先 \xa0 Run simulation ，執行 \xa0 server ，然後再執行 \xa0 client \xa0 後進行控制，這樣子的與組員們反覆的測試sever端的執行程式，在過程上認為難的不是連線，而是在編寫sever的收到客戶端執行指令，最常卡住的地方就是伺服器有收到客戶端訊號卻沒有執行內容，雖然也有配合GTP來減少工作量，但其實也不是能盲目相信，出來的程式還是需稍微看過，確認是否有無程式漏寫或干涉的。 \n 其實在對於IPV6的連線與webots最後串流的呈現上，其實覺得還是需在去加強理解，因為會發現在顯示伺服器網址時常常會因為 無法搜尋至該網址 而顯得不知所措，在事後在自家主機使用串流連線時，設定port和防火牆的部分也認為還不夠理解的很清楚，這幾點在製作流程下來覺得還需再去深入探討研究。 \n \n 41223122 ： \n \n \n 41223131 ： \n \n \n 41223134 ： \n \n \n 41223136 ： \n \n \n 41223158 ： \n \n', 'tags': '', 'url': 'reflections.html'}, {'title': 'list', 'text': '網站： \n 41223118： https://mdecd2025.github.io/hw-zhe41223118/ \n 41223122： https://mdecd2025.github.io/hw-Spirit0224/ \n 41223131： https://mdecd2025.github.io/hw-yuhao-08/ \n 41223134： https://mdecd2025.github.io/hw-41223134 \n 41223136： https://mdecd2025.github.io/hw-41223136/ \n 41223158： https://mdecd2025.github.io/hw-41223158 \n \n 倉儲： \n 41223118： https://github.com/mdecd2025/hw-zhe41223118 \n 41223122： https://github.com/mdecd2025/hw-Spirit0224 \n 41223131： https://github.com/mdecd2025/hw-yuhao-08 \n 41223134： https://github.com/mdecd2025/hw-41223134 \n 41223136： https://github.com/mdecd2025/hw-41223136 \xa0 \n 41223158： https://github.com/mdecd2025/hw-41223158 \n \n \n \n \n', 'tags': '', 'url': 'list.html'}, {'title': 'Final', 'text': '期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:  Webots 動態投籃模擬系統的協同設計 \n 說明:  \n 籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上. \n 操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止. \n 請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中. \n 影片標題:  國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題 \n \n final_project-01.7z \xa0(第一版-fourbar-car) \n w17-final-project.7z \xa0( 第二版-fourbar-car ) \n 將呼叫球的程式修改為一段時間後消失以減少模擬時的負荷量，並修改場景大小及圍牆 \n 修改球的程式,在 這邊 即可查看 \n', 'tags': '', 'url': 'Final.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};