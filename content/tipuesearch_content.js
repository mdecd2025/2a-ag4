<<<<<<< HEAD
var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 協同產品設計實習 - Collaborative Product Design Practice\xa0 \n 2a第四組網站： https://mdecd2025.github.io/2a-ag4/ \n 2a or 2b 第幾組倉儲: 2a-第四組( ag4 ) \n 小組近端維護連結： ag4_組長連結 \n \n 課程代號: cd2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n \n 課程評分: \n Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單 \n Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單 \n Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單', 'tags': '', 'url': 'About.html'}, {'title': 'Tutorial', 'text': '硬體需求: \n 2 GHz 4 核心以上 CPU, NVIDIA 或 AMD 支援 OpenGL 3.3 版, 帶有 512 MB 記憶體以上獨立顯示卡 \n 操作系統： \n Windows 10 或 11 64 位元操作系統 \n Ubuntu 24.04 以上版本 \n macOS 12 以上版本操作系統 \n 介面： \n 可以透過 Tools - Preferences - Language 中選擇使用 English  (目前無繁體中文介面，介面語系翻譯請參考\xa0 translations 頁面 說明) \n 版本差異： \n 每一版本都有些微差異，cd2025 將使用\xa0 R2025a \xa0(課程過程發現 Webots 2025a 有不少 bugs，其中包括操作過程閃退以及無法使用 Transform 節點，因此可以換為\xa0 Webots_2023b.7z \xa0 版 ) \n 原始碼使用授權： \n 採 \xa0 Apache 2.0 license agreement . Apache 2.0 是一種開放且對企業友善的授權條款，允許任何人免費使用、修改和分享軟體的原始程式碼，包括商業用途使用 \n 自行編譯 Webots 請參考 \xa0 building Webots 頁面 說明 \n Webots 套件中的大部分範例模擬檔案都使用 Apache 2.0 許可釋出，但有部分機器人和物件模型 （proto 檔案） 則是根據 \xa0 Webots 資產的開放原始碼許可協議 發佈，另外有些範例則是由用戶根據不同的開源許可證所提供，這些檔案都會明確標示其許可證內容 \n Webots 大綱介紹： \n 整理內容以在w2週時，經各組員分配後統整至網站的  task5  頁面\xa0 \n Webots 場景中包含以下定義： \n \n 物件所在位置 \n 物件的外形 \n 物件如何互動 \n 天空的顏色 \n 地心引力的定義 \n 摩擦力 \n 物件的質量 \n 模擬的起始條件 \n 其他有關模擬的設定等 \n \n', 'tags': '', 'url': 'Tutorial.html'}, {'title': 'Tutorial1', 'text': '電子冰球機器人： \n \n RectangleArena \xa0 場景樹中的節點，打開節點並顯示其字段。\xa0(雙點擊各節點可以帶出其特定的欄位) \n Add 按鈕。 在開啟的對話方塊中選擇\xa0 PROTO nodes (Webots Projects) / objects / factory / containers / WoodenBox (Solid) ，競技場中央應該會出現一個大箱子 \n 選擇場景樹視圖的最後一個節點。按一下場景樹視圖頂部的 Add 按鈕， 在對話框中選擇\xa0 PROTO nodes (Webots Projects) / robots / gctronic / e-puck / E-puck (Robot) ，電子冰上曲棍球機器人會出現在競技場的中央，移動並旋轉這個機器人，就像移動和旋轉盒子一樣，儲存模擬並按下 Run real-time 按鈕 \n', 'tags': '', 'url': 'Tutorial1.html'}, {'title': 'Tutorial2', 'text': '導引課程 2：修改環境 \n \n 學習修改地板： \n \n 內定的 RectangleArena PROTO 定義了一個簡單的地板，固定在靜態環境中，沒有物理節點，四周則被牆壁包圍。Webots 物件庫中還有其他預製的地板。我們現在將刪除 RectangleArena 節點，並添加一個簡單的地板，在場景樹視圖當中選擇並展開Floor。 修改size字段其調整為1mx1m。 \n \xa0\xa0\xa0\xa0\xa0\xa0 2.了解Solid節點的應用： \n Solid \xa0 節點代表剛體，即可以忽略變形的物體。剛體中任意兩點之間的距離無論外力如何作用，都保持恆定。例如桌子、機器人手指骨節或輪子都是剛體。軟體和關節物體不是剛體。例如繩子、輪胎、海綿或關節機器人手臂都不是剛體。然而，一個關節實體可以被分解成若干剛體。 \n \xa0\xa0\xa0\xa0\xa0\xa0 3.DEF-USE機制： \n DEF-USE 機制允許在一個地方定義一個節點，並在場景樹的其他地方重用該定義。這對於避免在世界文件中重複相同的節點非常有用。此外，它還允許用戶同時修改多個對象。其工作原理如下：首先使用 DEF 字符串標記一個節點。然後可以使用 USE 關鍵字在其他地方重用該節點的副本。只有 DEF 節點的字段可以編輯，USE 節點的字段繼承自 DEF 節點，無法更改。此機制依賴於世界文件中節點的順序。DEF 節點應在任何相應的 USE 節點之前定義。 \n 以下是影片： \n \n 因為後續軟體跳掉下面是後續結果： \n \n', 'tags': '', 'url': 'Tutorial2.html'}, {'title': 'task', 'text': '每週任務相關內容整理如下： \n task1 與 task2 任務目的在建立可於近端維護個人作業與協同作業的準備工作： \n task1 (自行製作可攜程式系統) \n task2 (使用 SSH 協定執行作業倉儲的推送) \n task3 與 task4 則為 HW2 的內容之一 \n task3 (使用 Solvespace 建立平面四連桿系統零組件) \n task4 (使用 Onshape 建立平面四連桿系統零組件) \n task5 與 task6 則為 HW3 的主要內容 \n task5 (Webots Tutorial 1 ~3) \n task6 (Webots Tutorial 4 ~6) \n', 'tags': '', 'url': 'task.html'}, {'title': 'task1', 'text': '利用既有的 Python 可攜系統建立各版本的 Python 可攜環境。 \n 1.\xa0 下載\xa0 portable_python311.7z ， 一套尚未安裝 pip 的 Python 3.11 可攜程式環境。 \n 2.\xa0 目錄中的 start_ipv6.bat 啟動可攜系統， 接著修改 start_ipv6.bat，利用 Search - Replace，Find 欄位填上 Python311，Replace 欄位填上 Python313 後，按下 Replace All，便可將啟動檔中所有 Python311 設定改為 Python313，另存修改後的檔案為 start_python313.bat。 \n 3.\xa0 以 stop.bat 關閉 start_ipv6.bat 開啟的可攜系統，改以心建立的 start_python313.bat 開啟可攜環境，之後在命令列輸入 python，確認目前的 Python 版本為 3.13.2 後，利用 Ctrl + z 退出 Python 後，利用 pip list 確認目前的 Python 3.13.2 系統尚未配置 pip 模組管理工具。 \n 4.\xa0 在命令列中，以 python get-pip.py 安裝 pip 工具，完成後，以 pip list 確認 pip.exe 已經配置完成。 \n 5.  最後在命令列中，以 pip install flask flask_cors bs4 lxml pelican markdown 安裝 cmsimde 網際內容管理系統啟動所需的 Python 模組後，此可攜系統中的 Python 3.13.2 套件已經可以用來維護個人作業倉儲與分組倉儲。 \n 之後利用新版的 \xa0 SciTE ， Portablegit ， PUTTY , \xa0 ShareX ， Wink ， Solvespace ， Zoomit ， ProcessExplorer \xa0 \n 以及原有的 tmp 及 home_ipv6，將以新的 start_python313 啟動。 \n python版本更新影片 ： \n \n *此影片後半幾點未完成 \n', 'tags': '', 'url': 'task1.html'}, {'title': 'task2', 'text': '1. 設定 Git 使用 PuTTY \n [remote "origin"]\n    url = git@mysession:用戶名/倉儲名.git\n    fetch = +refs/heads/*:refs/remotes/origin/*\n \n set GIT_SSH=Y:\\putty\\plink.exe\n \n 2. 用 PuTTYgen 產生金鑰 \n \n \n \n 開啟  puttygen.exe \n \n \n 點【Generate】，移動滑鼠產生金鑰 \n \n \n 複製上方的 Public Key 到 GitHub > Settings > SSH and GPG keys \n \n \n 點【Save private key】，儲存為  Y:\\myprivatekey.ppk \n \n \n 3.\xa0建立 SSH Session（mysession） \n \n \n \n 開啟  putty.exe \n \n \n Host Name 輸入： github.com \n \n \n Session 名稱輸入： mysession ，點【Save】 \n \n \n 4.\xa0設定 Session 的私鑰 \n \n \n \n 在 PuTTY 載入  mysession \n \n \n 左側：Connection > SSH > Auth，選擇  Y:\\myprivatekey.ppk \n \n \n 回到 Session 再次【Save】 \n \n \n 5.\xa0匯出 Session 設定（可攜使用） \n \n \n \n regedit  打開登錄編輯器 \n \n \n 匯出  mysession  設定為  mysession.reg \n \n \n 6.\xa0設定 Git 倉儲 URL \n [remote "origin"]\n    url = git@mysession:用戶名/倉儲名.git\n    fetch = +refs/heads/*:refs/remotes/origin/* \n 最後完成推送： \n git push origin main \n \n 過程影片： \n \n \n \n \n', 'tags': '', 'url': 'task2.html'}, {'title': 'task3', 'text': '使用 Solvespace 建立 平面四連桿 系統零組件： \n 41223118  下載檔案： 41223118_fourbar_slvs.7z \n \xa0 \xa0 \xa0 \xa0  零件繪製影片： \n \n \n 41223122 下載檔案： /downloads/41223122slvs.7z \n \xa0 \xa0 \xa0 \xa0 \xa0 零件繪製影片： \n \n 41223136 \n 下載檔案： 41223136_fourbar_slvs.7z \n 1~4零件 \n \n 5~7零件 \n \n \n', 'tags': '', 'url': 'task3.html'}, {'title': 'task4', 'text': '2a分組網站與倉儲連結 \n 2b分組網站與倉儲連結 \n 上列程式已經給出兩班當時已經參與分組的學員 Github 帳號，因此只需要從\xa0 https://mde.tw/list/2a.txt \xa0讀取學員的學號與 Github 帳號，並且在  for 迴圈 中，逐一用學員的 Github 帳號 相對於各班已經參與分組的學員  Github 帳號，並且列出特定學員的 Github 帳號不在前述已經參與分組的學員帳號數列中，即可 列出截至當時尚未那組的學員學號 。 \n # 甲班學員資料處理\nurl = "https://mde.tw/list/2a.txt"\ndata = open(url).readlines()\nall_stud = data[1:]\na_all_members = [\'41223154\', \'41271125\', \'41271158\', \'41271146\', \'41271131\', \'CYG41223103\', \'41223102\', \'41023128\', \'41023137\', \'41223137\', \'41223157\', \'41223156\', \'otakuyoyo\', \'41223141\', \'41223113\', \'kim41223114\', \'joeisme1208\', \'41223116\', \'41223144\', \'41223140\', \'41223143\', \'41223138\', \'41223134\', \'41223136\', \'zhe41223118\', \'Spirit0224\', \'yuhao-08\', \'41223158\', \'Ren911308\', \'41223150\', \'Manto8\', \'CYA41223106\', \'yan21ed\', \'Lin41223107\', \'41223133\', \'hong41223129\', \'41223110\', \'41223147\', \'Linjiahong41223125\', \'CHN41223132\', \'Yu-Fang-Hong\', \'41023111\', \'yckaooooo\', \'kolas911205\', \'41023105\', \'40932134\', \'41223104\', \'yan41223101\', \'41223105\', \'41223153\', \'41223120\', \'41223152\', \'G8People\', \'WSE41223112\', \'41223146\', \'41223119\']\n  \n# 顯示甲班標題\nprint("甲班:")\nfor i in all_stud:\n    drop_n = i.rstrip("\\n")\n    stud = drop_n.split("\\t")\n    stud_num = stud[0]\n    stud_github = stud[1]\n    if stud_github not in a_all_members:\n        print(stud_num) \n 2a未加入團隊學員 \n', 'tags': '', 'url': 'task4.html'}, {'title': 'task5', 'text': '1.請用繁體中文詳細說明下列資料:  https://cyberbotics.com/doc/guide/introduction-to-webots\xa0 \n Q1：什麼是Webots? \n Webots是一款專業的移動機器人模擬軟件，提供了3D虛擬環境，支持物理屬性設計，並且可創建不同類型的機器人(輪式、腿式、飛行)，並添加傳感器和執行器。支持單獨編程機器人以實現特定行為，提供大量模型和示例。模擬成功後，可以將程序轉移至真實的機器人，支持擴展新接口。 \n Q2：我可以用Webots做什麼? \n 應用領域：適用在移動機器人原型設計、運動研究、多代理系統、適應行為研究。 \n 行業範圍：涵蓋學術、汽車、航空、吸塵器、玩具等行業。 \n 教育用途：支持機器人學和編程教學（C/C++/Java/Python） \n 競賽：可用於機器人比賽。 \n Q3：要使用Webots，我需要知道什麼? \n \n 程式語言知識 ：需具備 C、C++、Java、Python或MATLAB 的基本知識來撰寫機器人控制器。若不熟悉語言可使用 簡單圖形化程式語言BotStudio編程 (適用於e-puck和Hemisson機器人) \n 3D模型創建：需了解 3D電腦圖形 和 VRML97 描述語言。 \n \n Q4：什麼是世界? \n \n 世界定義：描述3D涵蓋機器人及其環境的所有屬性(如位置、方向、幾何、外觀、物理屬性等) \n 層次結構：物件以層次方式組織，可包含其他物件(輪子、感測器、關節等) \n 功能與限制：(.wbt)不含控制器程示碼，只指定每個機器人所需的控制器名稱。 \n 儲存位置：檔案以".wbt"格式儲存，位於Webots專案的"worlds"子目錄 \n \n Q5：什麼是控制器? \n \n 控制器定義：控制器是用來控制world檔案中機器人的電腦程式 \n 運行機制：模擬開始時，Webots為每個機器人啟動獨立的控制進程，多個機器人可共用同一程式碼，但每個機器人有獨立進程。 \n 儲存位置：控制器檔案儲存在專案的"controllers"子目錄 \n \n 這是Webots中控制器的 核心概念 ， 強調其獨立性與語言支援的多樣性 。 \n Q6：什麼是監督控制器? \n \n 監督控制器定義：當機器人的 supervisor欄位設為TURE ，控制器成為監督控制器。能執行人類操作員的任務，而非真實機器人能完成的動作。 \n 特權操作：與一般控制器不同，監督控制器擁有特權功能，包括模擬控制，如隨機移動機器人、錄製模擬影片等。 \n \n 2.請整理網頁中重要的英文單字與用法, 並且針對其中所使用的英文文法逐句說明. \n \n \n Mobile robot simulation （移動機器人模擬） \n 差異 ：英文中的「simulation」指的是在虛擬環境中模擬機器人行為，而中文「模擬」同樣表示模仿，但在某些語境下，可能沒有英文「simulation」那麼強烈的虛擬環境暗示。 \n \n Rapid prototyping （快速原型設計） \n 差異 ：英文「prototyping」具體指「製作原型」這個過程，而中文「原型設計」更偏向結果導向，較少強調「製作過程」的含義。 \n \n Physics properties （物理屬性） \n 差異 ：英文「properties」除了「屬性」，也可以指物理環境中的具體特徵和參數，而中文的「屬性」更多強調事物的性質，而不一定包含具體數值。 \n \n Locomotion schemes （移動方式） \n 差異 ：英文「locomotion」特指機器人或動物的移動方式，包括步行、飛行等具體方式；而中文「移動」泛指動作，涵蓋範圍更廣泛。英文「schemes」強調設計、計劃的結構，但中文「方式」沒有強烈的規劃意味。 \n \n Controller program （控制程式） \n 差異 ：英文「controller」強調設備或程式的控制功能，而中文「控制」可能更多指行為，而非具體裝置。 \n \n Robot models （機器人模型） \n 差異 ：英文「model」不僅指模型，還可以包含系統設計的概念，而中文「模型」更偏向於外形或結構，缺乏英文中「概念模型」的深層意義。 \n \n Swarm intelligence （群體智能） \n 差異 ：英文「swarm」特指動物或機器人的群體行動，並且有合作與集體行為的含義，而中文「群體」也可指單純的個體聚集，未必強調合作。 \n \n Genetic algorithm （遺傳算法） \n 差異 ：英文「genetic」在此術語中引用遺傳學理論，而中文「遺傳」通常與生物學相關，在技術環境下可能需要具體說明該算法如何模仿生物遺傳過程。 \n \n Neural networks （神經網絡） \n 差異 ：英文中的「neural」源於生物神經系統，並引申至機器學習模型，而中文「神經」更多指生物概念，除非在明確的技術背景下才會引申至計算領域。 \n \n Artificial intelligence (AI) （人工智能） \n 差異 ：英文「artificial intelligence」是技術術語，指模擬人類智能的系統，中文「人工智能」直接翻譯，但中文的「人工」有時強調「人為」製造，可能略有不同的語感。 \n \n \n Supervisor controller （監督者控制程式） 差異 ：英文「supervisor」在此指具有高級管理功能的控制器，而中文「監督者」更多強調「人」的角色，控制程式翻譯時可能會弱化其技術層面的管理權限含義。 \n \n \n Multi-agent research （多智能體研究） 差異 ：英文「agent」具備自主行為或決策功能，中文「智能體」強調的是智能或行動個體，但「體」的翻譯可能較模糊，沒有完全涵蓋英文中「agent」的主動性和自決性。 \n \n \n Simulation control （模擬控制） 差異 ：英文「simulation」強調在虛擬或模擬環境中的控制，而中文「模擬控制」雖然意義相同，但「模擬」一詞在某些語境下會與「模仿」混淆。 \n \n \n 3D virtual worlds （3D 虛擬世界） 差異 ：英文「virtual worlds」通常指的是由電腦生成的虛擬環境，而中文「虛擬世界」在非技術環境中也可能指非現實的想像世界，因此技術語境中需要強調其數位屬性。 \n \n 3.請摘要出下列內容: (放入英文文章內容) \n \n \n What is Webots?  Webots is a professional mobile robot simulation software that provides a rapid prototyping environment. It allows users to create 3D virtual worlds with physics properties (e.g., mass, joints, friction) and add passive or active objects like mobile robots. Users can equip robots with sensors and actuators and program them for desired behaviors. It offers numerous robot models, examples, and interfaces to transfer simulations to real robots like e-puck or Nao. \n \n \n What can I do with Webots?  Webots is ideal for research and education in mobile robotics, supporting projects like robot prototyping (e.g., academic, automotive, toy industries), locomotion research (legged, humanoid robots), multi-agent studies (swarm intelligence, collaborative robots), and adaptive behavior research (genetic algorithms, AI). It’s also used for teaching robotics and robot competitions. \n \n \n What do I need to know to use Webots?  Basic knowledge of C, C++, Java, Python, or MATLAB is required to program controllers, though beginners can use the graphical BotStudio language for certain robots (e.g., e-puck). To create custom models or environments, familiarity with 3D graphics and VRML97 is needed for designing or importing 3D objects. \n \n \n How do I get User Support?  Cyberbotics offers paid support via Premier Service plans and custom development. Community-based support is available through Robotics StackExchange (webots tag), GitHub Discussions (development questions), GitHub Issues (bug reports), and Discord (quick discussions), though responses aren’t guaranteed. \n \n \n Webots Simulation  A Webots simulation consists of a world file (.wbt) defining robots and their environment, controller programs (in C/C++/Java/Python/MATLAB), and an optional physics plugin (in C/C++) to adjust physics behavior. World files may rely on external PROTO files and textures. \n \n \n What is a World?  A "world" in Webots is a 3D description of robots and their environment, detailing properties like position, geometry, appearance, and physics. Organized hierarchically (like VRML97), world files (.wbt) specify controller names but don’t include the controller code itself. \n \n \n What is a Controller?  A controller is a program that directs a robot in a world file, written in C, C++, Java, Python, or MATLAB. Webots launches each controller as a separate process per robot at simulation start. Some languages require compilation (e.g., C/C++), others interpretation (e.g., Python), with files stored in the "controllers" subdirectory. \n \n \n What is a Supervisor Controller?  A supervisor controller, tied to a robot with its "supervisor" field set to TRUE, can perform privileged actions (e.g., simulation control, moving robots, recording videos) typically reserved for human operators. Written in any supported language, it has greater capabilities than standard controllers. \n \n \n 4.請列出上述文章中的重要的英文單字與解釋, 以及出現在文句中的用法: \n \n Simulation （模擬）：\n \n 解釋：使用模型來模仿真實系統或過程的行為。 \n 用法：Webots is a professional mobile robot  simulation  software. \n Webots  simulation  consists of a world file. \n \n \n Prototyping （原型製作）：\n \n 解釋：快速建立一個初步模型，用於測試或演示。 \n 用法：provides a rapid  prototyping  environment. \n robot  prototyping  (e.g., academic, automotive, toy industries) \n \n \n Actuators （致動器）：\n \n 解釋：將信號轉換為機械運動的裝置，用於控制機器或系統。 \n 用法：Users can equip robots with sensors and  actuators  and program them for desired behaviors. \n \n \n Sensors （感測器）：\n \n 解釋：偵測環境變化並將其轉換為信號的裝置。 \n 用法：Users can equip robots with  sensors  and actuators and program them for desired behaviors. \n \n \n Locomotion （運動）：\n \n 解釋：生物或機器移動的能力或方式。 \n 用法：locomotion research (legged, humanoid robots). \n \n \n Multi-agent （多智能體）：\n \n 解釋：由多個自主實體組成的系統，它們可以相互交互。 \n 用法：multi-agent studies (swarm intelligence, collaborative robots). \n \n \n Adaptive behavior （適應性行為）：\n \n 解釋：系統根據環境變化調整其行為的能力。 \n 用法：adaptive behavior research (genetic algorithms, AI). \n \n \n Controller （控制器）：\n \n 解釋：控制系統行為的程式或裝置。 \n 用法：Basic knowledge of C, C++, Java, Python, or MATLAB is required to program  controllers . \n A  controller  is a program that directs a robot in a world file. \n \n \n Graphical （圖形的）：\n \n 解釋：使用圖像或視覺元素表示的。 \n 用法：beginners can use the  graphical  BotStudio language. \n \n \n Virtual （虛擬的）：\n \n 解釋：模擬或模仿真實環境或物件的。 \n 用法：create 3D  virtual  worlds with physics properties. \n \n \n Physics （物理學）：\n \n 解釋：研究物質、能量及其相互作用的科學。 \n 用法：create 3D virtual worlds with  physics  properties. \n \n \n Plugin （外掛程式）：\n \n 解釋：增加軟體功能的程式模組。 \n 用法：and an optional  physics  plugin (in C/C++) to adjust physics behavior. \n \n \n Supervisor （管理者）：\n \n 解釋：具有特殊權限的控制器，用於監控和控制模擬。 \n 用法：What is a  Supervisor  Controller? \n A  supervisor  controller, tied to a robot with its "supervisor" field set to TRUE, can perform privileged actions. \n \n \n \n 5.請詳細說明如何採手動方式在 Webots 建立下列場景: \n 步驟 1：創建新世界 \n \n \n 啟動 Webots ： \n \n 打開 Webots 軟體，並進入主介面。 \n \n \n \n 創建新世界 ： \n \n 在 Webots 的主畫面中，選擇  File  >  New World ，這會創建一個名為  untitled.wbt  的新世界。 \n 新創建的世界會有一個預設的地面，並且已經設定了一些基本參數。 \n \n \n \n 步驟 2：設置桌面結構 \n \n \n 新增桌子（Solid） ： \n \n 在  Scene Tree  中，右鍵點選  WorldInfo  節點，選擇  Add  >  Solid ，會在場景中新增一個  Solid  節點。這個  Solid  節點將代表你的桌子。 \n \n \n \n 新增桌面的形狀（Shape） ： \n \n 在  Solid  節點下，右鍵點選  Solid  節點，選擇  Add  >  Shape  >  Box 。這將創建一個長方體來代表桌面。 \n \n \n \n 設定桌子尺寸 ： \n \n 點選  Box  節點，然後在右側的屬性面板中設定  size  參數來調整桌子的大小。假設我們的桌子尺寸是 2 米長，1 米寬，0.1 米高，設定如下： \n \n size 2 0.1 1 \n \n \n 設置桌子的顏色 ： \n \n 點選  Solid  節點，右鍵選擇  Appearance ，然後設定材質的顏色。你可以選擇木色或其他顏色來模擬桌子表面。 \n \n \n \n 步驟 3：創建籃球框 \n \n \n 新增籃框（Solid） ： \n \n 在  Scene Tree  中，右鍵點選  WorldInfo  節點，選擇  Add  >  Solid ，再右鍵選擇新創建的  Solid  節點，選擇  Add  >  Shape  >  Cylinder 。這將創建一個圓柱形的籃框。 \n \n \n \n 設置籃框的大小與位置 ： \n \n 點選  Cylinder  節點，並在右側屬性面板中設定  radius  和  height 。例如： \n \n radius 0.2\nheight 0.05 \n \n 設定  translation  來調整籃框的位置。假設我們要把籃框放置在桌面上方，並放置在桌子的遠端。設定如下： \n \n translation 0 0.6 -0.5 \n 這樣，籃框就會位於桌子的上方，距離桌面的高度為 0.6 米。 \n \n \n 步驟 4：創建籃球 \n \n \n 新增籃球（Solid） ： \n \n 在  Scene Tree  中，右鍵點選  WorldInfo  節點，選擇  Add  >  Solid ，然後右鍵選擇新創建的  Solid  節點，選擇  Add  >  Shape  >  Sphere 。這將創建一個球形的籃球。 \n \n \n \n 設定籃球大小與顏色 ： \n \n 點選  Sphere  節點，在右側屬性面板中設定  radius ，例如將  radius  設定為 0.1 米，代表籃球的直徑為 20 公分。 \n \n radius 0.1 \n \n 設定顏色，為了讓籃球看起來像真實的籃球，可以選擇橙色。這樣籃球就會顯示為橙色。 \n \n \n \n 設定籃球的位置 ： \n \n 設定  translation ，將籃球放置於桌面上方，距離桌面大約 0.2 米。 \n \n translation 0 0.2 -0.5 \n \n \n 步驟 5：設置物理屬性 \n \n \n 設定桌子與籃框的物理屬性 ： \n \n \n 桌子和籃框不需要太多的彈性，但需要摩擦力，這樣物體才能有真實的接觸效果。 \n \n \n 在  Solid  節點中添加物理屬性設定： \n Physics { \n        density 1.0 \n        friction 0.9 \n        bounce 0.0 # 桌子和籃框不會反彈 \n} \n \n \n \n 設定籃球的物理屬性 ： \n \n 籃球需要較高的彈性，以便它能夠反彈。可以設置以下屬性： \n \n Physics {\n    density 0.5\n    friction 0.3\n    bounce 0.7  # 籃球有較高的反彈\n} \n \n \n 步驟 6：創建控制器 \n \n \n 創建 Python 控制器程式 ： \n \n \n 在 Webots 中，你需要使用控制器來控制物體的行為，例如投籃等。創建一個新的 Python 控制器，並將其命名為  basketball_controller.py 。 \n \n \n \n \n 編寫控制器邏輯 ： \n \n 控制器的主要目的是監控籃球的運動，並在籃球進入籃框時進行計分。下面是一個簡單的範例程式，會檢查籃球是否進入籃框範圍。 \n \n 範例程式碼：\n\nfrom controller import Robot\n\n# 創建 robot 物件來控制 Webots 模擬\nrobot = Robot()\ntimestep = int(robot.getBasicTimeStep())\n\n# 獲取籃球的物體\nball = robot.getFromDef("BASKETBALL")\nball_position = ball.getPosition()\n\n# 模擬循環\nwhile robot.step(timestep) != -1:\n    # 更新籃球的位置\n    ball_position = ball.getPosition()\n\n    # 如果籃球進入籃框範圍，則顯示得分訊息\n    if ball_position[0] > 0.5 and ball_position[0] < 1.5 and ball_position[1] > 0.5:\n        print("得分！") \n \n \n \n \n \n 連接控制器與世界 ： \n \n 在 Webots 中，點選  WorldInfo  節點，在屬性面板中找到  controller  屬性，並將其設置為剛創建的控制器程式名稱  basketball_controller.py 。 \n \n \n \n 步驟 7：測試與調整 \n \n \n 啟動模擬 ： \n \n 點選 Webots 上方的  Play  按鈕來啟動模擬。 \n 你應該可以看到籃球在桌子上彈跳，並且控制器會檢測籃球是否進入籃框並顯示得分。 \n \n \n \n 調整參數 ： \n \n 如果籃球的反彈效果或運動不符合預期，可以調整物理屬性（例如彈性、摩擦力、質量）來改善模擬效果。 \n \n \n \n 步驟 8：保存與分享 \n \n \n 保存世界檔案 ： \n \n 在 Webots 中，選擇  File  >  Save  來保存你的  .wbt  檔案。 \n \n \n \n 分享模擬 ： \n \n 你可以將  .wbt  檔案和控制器程式（例如  basketball_controller.py ）一起分享，讓其他人可以使用這個模擬。 \n \n \n \n 6. 希望可以手把手一步步說明該如何利用圖形介面 menu 建立這個場景, 過程中有那些要點必須特別注意? \n \n 步驟 1 ： 啟動 Webots 並創建新世界： \n \n \n 開啟 Webots 後，點擊菜單欄的「File」>「New World」 (Ctrl+N)-( 創建一個空白的仿真世界，檔案副檔名為 \xa0 .wbt) \n \n 要點 ：儲存時選擇一個容易找到的路徑，避免後續找不到檔案。 \n \n 步驊 2 ：添加桌面（地面） \n \n \n \n \xa0 \xa0 \xa01.在場景樹（Scene Tree，左側）中，右鍵點擊頂層節點（預設為 \xa0 WorldInfo ），選擇「Add Node」 \n \xa0 \xa0 \xa02.在節點選擇視窗中，展開「PROTO nodes (Webots Projects)」>「objects」>「floors」 \n \n \xa0 \xa0 \xa03.選擇 \xa0 RectangleArena ，點擊「Add」 \n \xa0 \xa0 \xa04.在場景樹中點擊 \xa0 RectangleArena ，右側屬性面板調整： \n \n \xa0 \xa0 \xa0 \xa0 \xa0(a.)size ：設為 \xa0 1 0.5 （長 1m，寬 0.5m，模擬桌面大小） \n \n \xa0 \xa0 \xa0 \xa0 \xa0(b.)translation ：設為 \xa0 0 0 0 （放在原點） \n \n \xa0 \xa0 \xa0 \xa0 \xa0(c.)appearance ：點擊後選擇 \xa0 PBRAppearance ，設置 \xa0 baseColor \xa0 為木頭色（如 \xa0 0.6 0.3 0.1 ） \n \n 要點 ：確保地面有 \xa0 Physics \xa0 節點（預設已有），以啟用物理互動 \n \n 步驟 3 ：添加籃框 \n \n \xa0 \xa0 \xa01.在場景樹中右鍵，選擇「Add Node」 \n \n \xa0 \xa0 \xa02.選擇 \xa0 Base nodes \xa0 > \xa0 Solid ，命名為 \xa0 BasketHoop \n \n \xa0 \xa0 \xa03.為 \xa0 BasketHoop \xa0 添加子節點： \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (a.)右鍵 \xa0 BasketHoop ，選擇「Add Node」> \xa0 Shape \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (b.)右鍵 \xa0 Shape ，選擇「Add Node」> \xa0 Geometry \xa0 > \xa0 Cylinder \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (c.)調整 \xa0 Cylinder \xa0 屬性： \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (I) radius ：設為 \xa0 0.1 （籃框半徑 10cm） \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0(II) height ：設為 \xa0 0.02 （籃框厚度 2cm） \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (III) subdivision ：設為 \xa0 32 （圓滑度） \n \n \n \n \n \xa0 \xa0 \xa04.在 \xa0 Shape \xa0 下添加 \xa0 Appearance ，設為紅色（ baseColor \xa0 設為 \xa0 1 0 0 ） \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (a.)translation ：設為 \xa0 0.4 0 0.3 （桌面邊緣後方，高度 30cm） \n \n \xa0 \xa0 \xa05.添加物理屬性： \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (a.)右鍵 \xa0 BasketHoop ，選擇「Add Node」> \xa0 Physics （確保固定不動） \n \n 要點 ：籃框應為靜態物體，避免被球撞動 \n \n 步驟 4 ：添加籃網（簡化版） \n \n \n \xa0 \xa0 \xa01.在 \xa0 BasketHoop \xa0 下右鍵，選擇「Add Node」> \xa0 Shape \n \n \xa0 \xa0 \xa02.添加 \xa0 Geometry \xa0 > \xa0 Cone ，模擬籃網： \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (a.) bottomRadius ：設為 \xa0 0.1 （與籃框相同） \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (b.) height ：設為 \xa0 0.15 （網長 15cm） \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (c.) side ：設為 \xa0 TRUE ， bottom \xa0 設為 \xa0 FALSE （空心錐形） \n \xa0 \xa0 \xa03.調整位置： \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (a.)translation ：設為 \xa0 0 0 -0.075 （錐形從籃框向下延伸） \n \n \xa0 \xa0 \xa04.設置外觀： \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (a.)添加 \xa0 Appearance ， baseColor \xa0 設為白色（ 1 1 1 ）， transparency \xa0 設為 \xa0 0.5 （半透明網狀感） \n \n 要點 ：這裡簡化為錐形，實際網狀結構需更複雜的建模，若有需求可後續調整 \n \n \n 步驟 5 ：添加籃球 \n \xa0 \xa0 \xa01.在場景樹頂層右鍵，選擇「Add Node」> \xa0 Solid ，命名為 \xa0 Basketball \n \xa0 \xa0 \xa02. 添加子節點： \n \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (a.)Shape \xa0 > \xa0 Geometry \xa0 > \xa0 Sphere ： \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (I)radius ：設為 \xa0 0.03 （直徑約 6cm，小型籃球） \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (b.)Appearance ：設為橙色（ baseColor \xa0 設為 \xa0 1 0.5 0 ） \n \n 要點 ：確保球有物理屬性，且位置不與桌面重疊，否則可能卡住 \n \n \n 步驟 6 ：添加投籃機制（簡化為槓桿）\n \xa0 \xa0 \xa01.在場景樹頂層右鍵，選擇「Add Node」> \xa0 Solid ，命名為 \xa0 Launcher \n \xa0 \xa0 \xa02.添加子節點： \n \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (a.)Shape \xa0 > \xa0 Geometry \xa0 > \xa0 Box ： \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (I)size ：設為 \xa0 0.2 0.05 0.01 （長 20cm，寬 5cm，厚 1cm） \n \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (b.)Appearance ：設為灰色（ baseColor \xa0 設為 \xa0 0.5 0.5 0.5 ） \n \n\xa0 \xa0 \xa03.添加物理屬性： \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (a.) Physics \xa0 > \xa0 mass \xa0 設為 \xa0 0.2 \n \xa0 \xa0 \xa04.添加鉸鏈關節（模擬槓桿旋轉）： \n \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (a.)在場景樹頂層右鍵，選擇「Add Node」> \xa0 HingeJoint \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (b.)在 \xa0 HingeJoint \xa0 的 \xa0 device \xa0 中添加 \xa0 RotationalMotor ，命名為 \xa0 LauncherMotor \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (c.)設置 \xa0 jointParameters \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (I) anchor ：設為 \xa0 -0.4 0 0 （鉸鏈固定在桌面前端） \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0(II) axis ：設為 \xa0 0 1 0 （沿 Y 軸旋轉） \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (d.)將 \xa0 Launcher \xa0 拖入 \xa0 HingeJoint \xa0 的 \xa0 endPoint \xa0 欄位 \n \n \n \n \xa0 \xa0 \xa05.調整 \xa0 Launcher \xa0 位置：\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (a.)translation ：設為 \xa0 -0.3 0 0.005 （與桌面接觸） \n \n \n \n \n \n \n \n 要點 ：確保槓桿與球初始位置對齊，後續需編寫控制器讓其旋轉 \n \n \n 步驟 7 ：設置光源與背景 \n \n \xa0 \xa0 \xa01.添加光源： \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (a.)場景樹右鍵，選擇「Add Node」> \xa0 PointLight \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (b.)location ：設為 \xa0 0 0 1 （桌面上方 1m） \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (c.)intensity ：設為 \xa0 1 \n \n \n \n \n \xa0 \xa0 \xa02.添加背景： \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (a.) 場景樹右鍵，選擇「Add Node」> \xa0 Background \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (b.) skyColor ：設為 \xa0 0.5 0.5 1 （淺藍色天空） \n \n 要點 ：光源位置影響陰影效果，確保場景明亮可見 \n \n \n \n \n 步驟 8 ：保存與測試 \n \n \xa0 \xa0 \xa01.點擊「File」>「Save World」 \n \xa0 \xa0 \xa02.按工具欄「Play」按鈕運行仿真 \n \xa0 \xa0 \xa03.觀察： \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (a.)球是否會因重力落在槓桿上 \n \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 (b.)籃框是否穩定 \n \n 要點 ：若球卡住或場景異常，檢查物體的 \xa0 translation \xa0 是否重疊 \n \n \n 特別注意的要點 \n \n \n \n 物理屬性 ：\n \n 每個動態物體（如球、槓桿）必須有 \xa0 Physics \xa0 節點，否則不會受重力影響。 \n 靜態物體（如籃框）也需 \xa0 Physics ，但質量設為 0 或不設值。 \n \n \n 位置精確性 ：\n \n 避免物體初始位置重疊，否則可能導致仿真崩潰或物體彈飛。 \n 使用屬性面板輸入精確數值，而非僅靠 3D 視圖拖曳。 \n \n \n 關節與控制器 ：\n \n 投籃槓桿需要控制器（Controller）驅動 \xa0 RotationalMotor ，這部分需額外編寫程式碼（例如用 Python 或 C）。 \n 測試時可手動調整槓桿角度（ position ），模擬投籃動作。 \n \n \n 比例與單位 ：\n \n Webots 使用公尺作為單位，確保所有尺寸（如籃球半徑、桌面大小）符合現實比例。 \n \n \n 性能優化 ：\n \n 避免添加過多複雜節點（如高細分網格），以免仿真變慢。 \n \n \n \n 後續建議 \n \n \n \n 控制器編寫 ：為 \xa0 LauncherMotor \xa0 添加一個簡單控制器，讓槓桿按鍵觸發旋轉，模擬投籃。 \n 計分系統 ：添加 \xa0 TouchSensor \xa0 到籃框，檢測球是否進籃。 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'task5.html'}, {'title': 'task6', 'text': 'Webots Tutorial (HW3) \n 1. 啟動 Webots 串流模式： \n \xa0 \xa0使用以下指令開啟 Webots 並啟用串流伺服器： \n webotsw --stream\n \n 2.\xa0 \xa0 預設埠號：   1234 \xa0 \xa0 \xa0使用瀏覽器連線至： \n \n \n 本地端： http://localhost:1234 \xa0 (預設) \n \n \n 遠端機器： http://stream_server_ip:1234 \xa0 (個人IP) \n \n \n 3.\xa0 建議瀏覽器： \xa0 \xa0 Windows 環境下使用 Edge ，相容性較佳（支援 WebGL2） \n 4.\xa0 顯示投籃成績（Scoreboard / 計時器） \n \xa0a. 近端檢視： \n \n \n 利用 Webots  display  元件展示數字。 \n \n \n 限制：  僅在本機 Webots 視窗中可見，無法透過串流顯示。 \n \n \n \xa0b. 串流顯示（7 段顯示器實作）： \n \n \n 建模工具：  使用 Solvespace 繪製的 7 段顯示器模型（檔案： score_counter.7z ）。 \n \n \n 匯入模型： \n \n \n 在 Webots 中插入一個  Solid  →  Shape  →  Mesh 。 \n \n \n url  指向各段（a ~ g）的  .obj  檔案。 \n \n \n \n \n 變色顯示數字： \n \n \n 使用  controller 程式  來變更 Mesh 段的顏色（開：紅色／亮；關：灰色／暗）。 \n \n \n 每個數字由不同段（a-g）組成，模擬數字顯示效果。 \n \n \n \n \n 使用 Supervisor 模式： \n \n \n 可程式化操控每個 Mesh 的外觀（顏色控制、數字變換、倒數計時等）。 \n \n \n \n \n \n 其結果七段顯示數字顯示內容與Exam3-2相似，可以參考 這個頁面 或下載\xa0 Exam3-2.7z \xa0。', 'tags': '', 'url': 'task6.html'}, {'title': 'w3', 'text': '2a 學員作業網站與倉儲連結 \n 2b 學員作業網站與倉儲連結 \n 2a 分組網站與倉儲連結 \n 2b 分組網站與倉儲連結 \n 2a未加入團隊學員 \n 2b未加入團隊學員 \n', 'tags': '', 'url': 'w3.html'}, {'title': 'Exam3', 'text': '快速瀏覽 ： \n Exam3-1 ： \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0  41223118 、41223122、41223131、41223134、41223136、41223158 \n Exam3-2 ： \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0  41223118 、41223122、41223131、41223134、41223136、41223158 \n Exam3-3 ： \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0  41223118 、41223122、41223131、41223134、41223136、41223158 \n reflections ： \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0  41223118 、 41223122 、 41223131 、 41223134 、 41223136 、 41223158 \n \n 由各組組員將所完成的影片與心得整理在個人作業網站中的此頁面後，再逐一利用組員的帳號權限，將個人心得與 Exam3  完成影片，統一放入分組網站中的本頁面中 \n 組員應用檔案： \n 防火牆設定： set_firewall_ports_1000_2000_8000_9000.7z \n Exam3-2 七段器webots模擬程式： /downloads/three_digit_counter.7z \n \n Exam3-1.7z \xa0(HW1四連桿) \n Exam3-2.7z \xa0(七段顯示器) \n 可攜所需下載 python 程式庫： \n pip install keyboard  (鍵盤控制) \n pip install websocket-server  (伺服器) \n pip install websocket-client  (客戶端) \n 在可攜的  .bat  啟動端內還需將 Webots 內建的動態連結程式庫納入： \n set WEBOTS_HOME=%Disk%:\\Webots_2023b \n \n set PYTHONPATH=%Disk%:\\Python313\\DLLs;%Disk%:\\Python313\\Lib;%Disk%:\\Python313\\Lib\\site-packages;%Disk%:\\NX\\NXBIN\\python;%Disk%:\\Webots_2023b\\msys64\\mingw64\\bin;%Disk%:\\Webots_2023b\\lib\\controller\\python; \n 以上條件皆具備後，以  webotsw --stream  啟動webots串流： \n 啟動順序-先 Run simulation  (暫停和歸零) ，執行  server ，然後再執行  client  後進行控制 \n \n 如不想手動新增，請於網站 w10週 下載最新版可攜程式，又或者clone下方.bat程式內容 \n @echo off\nset Disk=y\nsubst %Disk%: "data"\n\n%Disk%:\n\nset HomePath=%Disk%:\\home_ipv6\nset HomeDrive=%Disk%:\\home_ipv6\nset Home=%Disk%:\\home_ipv6\nset USERPROFILE=%Disk%:\\home_ipv6\n\nREM 將系統 Python 程式的 io 設為 utf-8\nset PYTHONIOENCODING="utf-8"\n\nset PYTHONPATH=%Disk%:\\Python313\\DLLs;%Disk%:\\Python313\\Lib;%Disk%:\\Python313\\Lib\\site-packages;%Disk%:\\NX\\NXBIN\\python;%Disk%:\\Webots_2023b\\msys64\\mingw64\\bin;%Disk%:\\Webots_2023b\\lib\\controller\\python;\nset PYTHONHOME=%Disk%:\\Python313\nREM for Webots\nset PYTHON_PATH=%Disk%:\\Python313\nset WEBOTS_HOME=%Disk%:\\Webots_2023b\n\nREM for putty\nset GIT_SSH=%Disk%:\\PuTTY\\plink.exe\n\nREM for Java and Android SDK\nset java_home=%Disk%:\\java\\jdk8u222-b10\nset ANDROID_SDK_home=%Disk%:\\home_ipv6\nset GRADLE_USER_home=%Disk%:\\home_ipv6\nset ANDROID_SDK_ROOT=%Disk%:\\android\\sdk\nset ANDROID_Home=%Disk%:\\android\\sdk\nset REPO_OS_OVERRIDE=windows\n\nREM 設定跟 Python 有關的命令搜尋路徑\nset path_python=%Disk%:\\Python313;%Disk%:\\Python313\\Scripts;\nREM 設定跟Git 有關的命令搜尋路徑\nset path_git=%Disk%:\\portablegit\\bin;\nREM 設定 msys2 64 位元的執行路徑\nREM %Disk%:\\msys64\\mingw64\\bin is for GD library\nset path_msys2=%Disk%:\\msys64\\ucrt64\\bin;%Disk%:\\msys64\\mingw64\\bin;\nREM set for LaTeX\nset path_miketex=%Disk%:\\miktex-portable\\texmfs\\install\\miktex\\bin\\x64;\nREM Flutter path\nset path_flutter=%Disk%:\\flutter\\bin;%java_home%\\bin;%Disk%:\\Android\\sdk;%Disk%:\\Android\\sdk\\tools;%Disk%:\\Android\\sdk\\tools\\bin;%Disk%:\\Android\\sdk\\emulator;%Disk%:\\Android\\sdk\\platform-tools;%Disk%:\\flutter\\bin\\cache\\dart-sdk\\bin;%Disk%:\\vscode;\nset path_node=%Disk%:\\node-v14.15.4-win-x64;\n\nset path_postgresql=%Disk%:\\postgresql13\\bin;\nset path_range=%Disk%:\\Range3_official\\bin;\nrem set path_range=%Disk%:\\range-3.2.5_kmol\\bin;\nset path_lua=%Disk%:\\lua-5.3.5\\;\nset path_core=%Disk%:\\coreutils-5.3.0\\bin;\nREM for gogs\nset path_putty=%Disk%:\\PuTTY;\nset path_vscode=%Disk%:\\vscode;\n\nREM for Rust\nset MINGW_PATH=%path_msys2%;\nset GIT_PATH=%path_git%;\nset VSCODE_PATH=%path_vscode%\nset RUSTUP_HOME=%Disk%:\\Rust\\rust\nset CARGO_HOME=%Disk%:\\Rust\\cargo\nset RUST_PATH=%CARGO_HOME%\\bin\n\nREM for Erlang and Elixir\nset path_erlang=%Disk%:\\elixir\\erl10.7\\bin\\;%Disk%:\\elixir\\erl10.7\\erts-10.7\\bin;%Disk%:\\elixir\\elixir\\bin;\nset ERTSPATH=%Disk%:\\elixir\\erl10.7\\erts-10.7\\bin\nset ERLINI=%Disk%:\\elixir\\erl10.7\\erts-10.7\\bin\\erl.ini\n\nREM for Haskell\nset path_haskell=%Disk%:\\ghc-9.0.1-x86_64-unknown-mingw32\\bin;\nREM for node.js\nset path_nodejs=%Disk%:\\node-v14.17.2-x64\\nodejs;%Disk%:\\node-v14.17.2-x64\\nodejs\\node_modules\\npm;\n\nREM 加入 PostgreSQL 所需的環境變數設定\n\n@SET PGDATA=%Disk%:\\postgresql13\\data\n@SET PGDATABASE=postgres\n@SET PGUSER=postgres\n@SET PGPORT=5432\n@SET PGLOCALEDIR=%Disk%:\\postgresql13\\share\\locale\n\nREM for Range3\nREM REG IMPORT %Disk%:\\range3.reg\n\nREM proxy needed for heroku login\nREM proxy can not use with fossil scm\nREM proxy can not use with Rust installation\nREM needed for node.js\nREM set HTTP_PROXY=http://[2001:288:6004:xx::42]:3128\nREM set HTTPS_PROXY=http://[2001:288:6004:xx::42]:3128\n\nREM for PyRep\nset VREP_PATH=%Disk%:\\CoppeliaSim\n\nREM BOOST_ROOT for compiling coppeliasim but maybe not for linking\nREM set BOOST_ROOT=%Disk%:\\boost_1_76_0\\;\nset path_copsim=%Disk%:\\boost_1_76_0\\;%Disk%:\\Strawberry\\perl\\bin;%Disk%:\\cmake-3.21.0-windows-x86_64\\bin;%Disk%:\\diffutils-2.8.7-1\\bin;%Disk%:\\patch-2.5.9-7\\bin;%D%:\\jom_1_1_2;%Disk%:\\LLVM\\bin;%Disk%:\\QtCreator\\bin;%Disk%:\\CoppeliaSimEdu;%Disk%:\\Python313\\tcl\\tcl8.6;\n\nREM for CMake\nset CMAKE_C_COMPILER=%Disk%:\\msys64\\ucrt64\\bin\\gcc;\nset CMAKE_CXX_COMPILER=%Disk%:\\msys64\\ucrt64\\bin\\g++;\n\nREM set QT_QPA_PLATFORM_PLUGIN_PATH=Y:\\msys64_20240507\\mingw64\\share\\qt5\\plugins\\platforms\nREM set QT_PLUGIN_PATH=Y:\\msys64_20240507\\mingw64\\share\\qt5\\plugins\n\nREM for execute scite directly\nset path_scite=%Disk%:\\wscite\\;\n\nREM for simExtZMQ\nset path_xsltproc=%Disk%:\\xsltproc;\n\nREM for OpenSSL\nSet OPENSSL_CONF=%Disk%:\\OpenSSL-Win64\\SSL\\openssl.cnf\nset path_openssl=%Disk%:\\OpenSSL-Win64\\bin;\n\nREM for textract\nset path_poppler=%Disk%:\\poppler-24.07.0\\Library\\bin;\n\nREM for tiny C compiler\nset path_tcc=%Disk%:\\tcc;\n\nREM for webots\nset  path_webots=%Disk%:\\Webots_2023b\\msys64\\mingw64\\bin;%Disk%:\\Webots_2023b\\msys64\\usr\\bin\n\nREM for blender\nset path_blender=%Disk%:\\Blender 4.2;\n\npath=%Disk%:;%path_python%;%path_git%;%path_copsim%;%path_msys2%;%path_miketex%;%path_flutter%;%path_node%;%path_tcc%;%path_postgresql%;%path_range%;%path_lua%;%path_core%;%path_putty%;%path_vscode%;%RUST_PATH%;%path_erlang%;%path_nodejs%;%path_haskell%;%path_scite%;%path_xsltproc%;%path_gnuplot%;%path_openssl%;%path_poppler%;%path_webots%;%path_blender%;%path%;\n\nREM for NX2312, must after path setup \nset SPLM_LICENSE_SERVER=29000@your_server\nset UGII_LANG=english\nset UGS_LICENSE_BUNDLE=ACD11,ACD10\nset UGII_BASE_DIR=%Disk%:\\NX\\\nset UGII_TMP_DIR=%Disk%:\\NX\\temp\nset UGII_LIB_PATH=%Disk%:\\NX\\NXBIN\\python\nset ugii=%Disk%:\\NX\\ugii;%Disk%:\\NX\\nxbin;\npath = %ugii%;%path%\nREM Xcopy %Disk%:\\home_ipv6\\AppData\\Local\\Siemens\\NX2312 C:\\users\\%USERNAME%\\AppData\\Local\\Siemens\\NX2312 /E /H /C /I /Y\n\nREM start ugraf -nx\n\nREM python %Disk%:\\tmp\\nx_ex\\new_part.py\n\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\n\nstart /MIN %Disk%:\\wscite\\SciTE.exe\nstart /MIN %Disk%:\\wscite\\SciTE.exe\n\nREM start webotsw.exe\n\n\nExit\n \n \n', 'tags': '', 'url': 'Exam3.html'}, {'title': '3-1 video', 'text': 'Exam3-1 \n 41223118 ： \n \n \n 41223122 ： \n \n \n 41223131 ： \n \n \n 41223134 ： \n \n \n 41223136 ： \n \n \n 41223158 ： \n', 'tags': '', 'url': '3-1 video.html'}, {'title': '3-2 video', 'text': 'Exam3-2 \n 41223118 ： \n \n \n 41223122 ： \n \n \n 41223131 ： \n \n \n 41223134 ： \n \n \n 41223136 ： \n \n \n 41223158 ： \n', 'tags': '', 'url': '3-2 video.html'}, {'title': '3-3 video', 'text': 'Exam3-3 \n 41223118 ： \n \n \n 41223122 ： \n \n \n 41223131 ： \n \n \n 41223134 ： \n \n \n 41223136 ： \n \n \n 41223158 ： \n', 'tags': '', 'url': '3-3 video.html'}, {'title': 'reflections', 'text': '41223118 ： \n 過程最為反覆的可能是\xa0 webotsw --steam \xa0 啟動webots的串流，確認可攜啟動端是否有加入Webots 內建的動態連結程式庫，然後先 \xa0 Run simulation ，執行 \xa0 server ，然後再執行 \xa0 client \xa0 後進行控制，這樣子的與組員們反覆的測試sever端的執行程式，在過程上認為難的不是連線，而是在編寫sever的收到客戶端執行指令，最常卡住的地方就是伺服器有收到客戶端訊號卻沒有執行內容，雖然也有配合GTP來減少工作量，但其實也不是能盲目相信，出來的程式還是需稍微看過，確認是否有無程式漏寫或干涉的。 \n 其實在對於IPV6的連線與webots最後串流的呈現上，其實覺得還是需在去加強理解，因為會發現在顯示伺服器網址時常常會因為 無法搜尋至該網址 而顯得不知所措，在事後在自家主機使用串流連線時，設定port和防火牆的部分也認為還不夠理解的很清楚，這幾點在製作流程下來覺得還需再去深入探討研究。 \n \n 41223122 ： \n \n \n 41223131 ： \n \n \n 41223134 ： \n \n \n 41223136 ： \n \n \n 41223158 ： \n', 'tags': '', 'url': 'reflections.html'}, {'title': 'list', 'text': '網站： \n 41223118： https://mdecd2025.github.io/hw-zhe41223118/ \n 41223122： https://mdecd2025.github.io/hw-Spirit0224/ \n 41223131： https://mdecd2025.github.io/hw-yuhao-08/ \n 41223134： https://mdecd2025.github.io/hw-41223134 \n 41223136： https://mdecd2025.github.io/hw-41223136/ \n 41223158： https://mdecd2025.github.io/hw-41223158 \n \n 倉儲： \n 41223118： https://github.com/mdecd2025/hw-zhe41223118 \n 41223122： https://github.com/mdecd2025/hw-Spirit0224 \n 41223131： https://github.com/mdecd2025/hw-yuhao-08 \n 41223134： https://github.com/mdecd2025/hw-41223134 \n 41223136： https://github.com/mdecd2025/hw-41223136 \xa0 \n 41223158： https://github.com/mdecd2025/hw-41223158 \n \n Brython-列出組員倉儲及網站 連結 \n from browser import html, document, window\n  \n# 定義資料來源 URL\nurl = "https://mde.tw/list/2a.txt"\n  \n# 定義要查找的學號列表\ntarget_ids = ["41223118", "41223122", "41223131", "41223134", "41223136", "41223158"]\n  \n# 顯示學員數量\nprint("正在處理...")\n  \n# 取得 HTML 中的元素 id 為 "brython_div1"\nbrython_div1 = document["brython_div1"]\n  \n# 使用 JavaScript 的 fetch API 來抓取資料\ndef process_data(response_text):\n    # 將抓取到的資料分行\n    data = response_text.splitlines()\n  \n    # 跳過標題行，取得學員資料\n    all_stud = data[1:]\n  \n    # 逐行處理學員資料\n    for stud in all_stud:\n        # 假設學員資料的格式為 "學號 學員賬號"\n        student_info = stud.strip().split()  # 使用 split() 將每行分為學號和帳號\n        if len(student_info) == 2:  # 確保每行有學號和帳號\n            student_id = student_info[0].strip()  # 學號\n            student_account = student_info[1].strip()  # 學員賬號\n  \n            # 檢查學號是否在目標學號列表中\n            if student_id in target_ids:\n                # 創建 GitHub 和作業網站的超鏈接\n                github_link = f"https://github.com/mdecd2025/hw-{student_account}"\n                homework_link = f"https://mdecd2025.github.io/hw-{student_account}/"\n                  \n                # 顯示該學號的 GitHub 和作業網站\n                brython_div1 <= html.A(student_id, href=github_link)  # 學號是 GitHub repo 連結\n                brython_div1 <= " "  # 空格\n                brython_div1 <= html.A("(repo)", href=homework_link)  # 作業網站的超鏈接標題為 (repo)\n                brython_div1 <= html.BR()  # 換行\n  \n# 使用 JavaScript 的 fetch API 拉取資料\nwindow.fetch(url).then(lambda response: response.text()).then(process_data)\n \n \n', 'tags': '', 'url': 'list.html'}, {'title': 'Final', 'text': '期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:  Webots 動態投籃模擬系統的協同設計 \n 說明:  \n 籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上. \n 操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止. \n 請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中. \n 影片標題:  國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題 \n', 'tags': '', 'url': 'Final.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};
=======
var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 協同產品設計實習 - Collaborative Product Design Practice \n 學員作業網站: https://mdecd2025.github.io/hw-41223136/ \n 學員作業倉儲: https://github.com/mdecd2025/hw-41223136 \xa0\xa0 \n \n 課程代號: cd2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n \n 課程評分: \n Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單 \n Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單 \n Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單 \n', 'tags': '', 'url': 'About.html'}, {'title': '上課內容', 'text': '\n', 'tags': '', 'url': '上課內容.html'}, {'title': 'w1', 'text': '利用python版本更新影片： \n \n 匯出組員倉儲及網站影片： \n \n 列出組員的倉儲與網頁 \n # 從  Brython 程式庫中的 browser 導入 html, 可用來輸出超文件內容\n# 而所導入的 document 可以指向網頁中的特定 id 內容\nfrom browser import html, document\n# 建立 url 變數與網站中 2a 學員的學號與帳號資料 URL 網誌字串對應\nurl = "https://mde.tw/list/2a.txt"\n# 利用 open() 物件中的 readlines() 方法, 取出網站中的資料並逐行放入數列中, 因此 data 的資料型別為數列\ndata = open(url).readlines()\n# 進行資料查驗時, 印出 data 數列內容\n#print(data)\n# 因為學員資料中的第一列為標題, 因此有效資料從索引值 1 開始\nall_stud = data[1:]\n# 利用 len() 函式查驗 all_stud 數列有幾筆資料, 因為要與前後的字串併接, 因此利用 str() 將整數轉為字串\nprint("總共有 " + str(len(all_stud)) + "名學員")\n# \n# 利用 document[] 取得 id 為 "brython_div1" 的位置, 然後與 brython_div1 變數對應\nbrython_div1 = document["brython_div1"]\n# 利用 Brython 的 "<=" 特殊符號, 將右值帶有字串與超文件內容物件插入 brython_div1 變數所指定的位置\n# 其中利用 html.A 建立 anchor 標註物件, 第一個變數為 anchor 字串, 第二個變數則為 hyper text reference\nbrython_div1 <= "1. " + html.A("2a-ag4", href="https://mdecd2025.github.io/2a-ag4/")+ html.A("(repo)", href="https://github.com/mdecd2025/2a-ag4")\n# 利用 html.BR() 插入 break 標註\nbrython_div1 <= html.BR()\nbrython_div1 <= "2. " + html.A("41223118", href="https://mdecd2025.github.io/hw-zhe41223118/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-zhe41223118")\nbrython_div1 <= html.BR()\nbrython_div1 <= "3. " + html.A("41223122", href="https://mdecd2025.github.io/hw-41223122/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223122")\nbrython_div1 <= html.BR()\nbrython_div1 <= "4. " + html.A("41223131", href="https://mdecd2025.github.io/hw-41223131/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223131")\nbrython_div1 <= html.BR()\nbrython_div1 <= "5. " + html.A("41223134", href="https://mdecd2025.github.io/hw-41223134/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223134")\nbrython_div1 <= html.BR()\nbrython_div1 <= "6. " + html.A("41223136", href="https://mdecd2025.github.io/hw-41223136/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223136")\nbrython_div1 <= html.BR()\nbrython_div1 <= "7. " + html.A("41223158", href="https://mdecd2025.github.io/hw-41223158/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223158")\n \n', 'tags': '', 'url': 'w1.html'}, {'title': 'w3', 'text': '列出各班未納入分組名單的名單 \n # 甲班學員資料處理\nurl = "https://mde.tw/list/2a.txt"\ndata = open(url).readlines()\nall_stud = data[1:]\na_all_members = [\'41223154\', \'41271125\', \'41271158\', \'41271146\', \'41271131\', \'CYG41223103\', \'41223102\', \'41023128\', \'41023137\', \'41223137\', \'41223157\', \'41223156\', \'otakuyoyo\', \'41223141\', \'41223113\', \'kim41223114\', \'joeisme1208\', \'41223116\', \'41223144\', \'41223140\', \'41223143\', \'41223138\', \'41223134\', \'41223136\', \'zhe41223118\', \'Spirit0224\', \'yuhao-08\', \'41223158\', \'Ren911308\', \'41223150\', \'Manto8\', \'CYA41223106\', \'yan21ed\', \'Lin41223107\', \'41223133\', \'hong41223129\', \'41223110\', \'41223147\', \'Linjiahong41223125\', \'CHN41223132\', \'Yu-Fang-Hong\', \'41023111\', \'yckaooooo\', \'kolas911205\', \'41023105\', \'40932134\', \'41223104\', \'yan41223101\', \'41223105\', \'41223153\', \'41223120\', \'41223152\', \'G8People\', \'WSE41223112\', \'41223146\', \'41223119\']\n  \n# 顯示甲班標題\nprint("甲班:")\nfor i in all_stud:\n    drop_n = i.rstrip("\\n")\n    stud = drop_n.split("\\t")\n    stud_num = stud[0]\n    stud_github = stud[1]\n    if stud_github not in a_all_members:\n        print(stud_num) \n 列出2a還未納入的學員名單 \n', 'tags': '', 'url': 'w3.html'}, {'title': 'w4', 'text': 'putty的使用方法、fossil的操作方式 \n 操作影片： \n \n fossil的操作過程可以到 老師的頁面 觀看 \n 已知目前學員的作業倉儲無法在 IPv6 位址設定時正確運作，必須下載\xa0 cmsimde_w4.7z ， 解開壓縮檔案後，替換倉儲中的 cmsimde 目錄 \n 利用IPV6設定網路 \n 以下是操作影片： \n \n', 'tags': '', 'url': 'w4.html'}, {'title': 'w5', 'text': 'webots的介紹和更改wscite資料夾和webots使用方式 \n \n', 'tags': '', 'url': 'w5.html'}, {'title': 'webots詳細說明', 'text': 'Q1：什麼是Webots? \n Webots是一款專業的移動機器人模擬軟件，提供了3D虛擬環境，支持物理屬性設計，並且可創建不同類型的機器人(輪式、腿式、飛行)，並添加傳感器和執行器。支持單獨編程機器人以實現特定行為，提供大量模型和示例。模擬成功後，可以將程序轉移至真實的機器人，支持擴展新接口。 \n Q2：我可以用Webots做什麼? \n 應用領域：適用在移動機器人原型設計、運動研究、多代理系統、適應行為研究。 \n 行業範圍：涵蓋學術、汽車、航空、吸塵器、玩具等行業。 \n 教育用途：支持機器人學和編程教學（C/C++/Java/Python） \n 競賽：可用於機器人比賽。 \n Q3：要使用Webots，我需要知道什麼? \n \n 程式語言知識 ：需具備 C、C++、Java、Python或MATLAB 的基本知識來撰寫機器人控制器。若不熟悉語言可使用 簡單圖形化程式語言BotStudio編程 (適用於e-puck和Hemisson機器人) \n 3D模型創建：需了解 3D電腦圖形 和 VRML97 描述語言。 \n \n Q4：什麼是世界? \n \n 世界定義：描述3D涵蓋機器人及其環境的所有屬性(如位置、方向、幾何、外觀、物理屬性等) \n 層次結構：物件以層次方式組織，可包含其他物件(輪子、感測器、關節等) \n 功能與限制：(.wbt)不含控制器程示碼，只指定每個機器人所需的控制器名稱。 \n 儲存位置：檔案以".wbt"格式儲存，位於Webots專案的"worlds"子目錄 \n \n Q5：什麼是控制器? \n \n 控制器定義：控制器是用來控制world檔案中機器人的電腦程式 \n 運行機制：模擬開始時，Webots為每個機器人啟動獨立的控制進程，多個機器人可共用同一程式碼，但每個機器人有獨立進程。 \n 儲存位置：控制器檔案儲存在專案的"controllers"子目錄 \n \n 這是Webots中控制器的 核心概念 ， 強調其獨立性與語言支援的多樣性 。 \n Q6：什麼是監督控制器? \n \n 監督控制器定義：當機器人的 supervisor欄位設為TURE ，控制器成為監督控制器。能執行人類操作員的任務，而非真實機器人能完成的動作。 \n 特權操作：與一般控制器不同，監督控制器擁有特權功能，包括模擬控制，如隨機移動機器人、錄製模擬影片等。 \n \n', 'tags': '', 'url': 'webots詳細說明.html'}, {'title': 'w6', 'text': '要啟動webots在可攜裡面輸入 webotsw 就可以開啟軟體，前提是要檔案內要 Webots_2025a_web.7z 才可以開啟，並放在data頁面，如果是舊版可攜套件 也可在.bat啟動編碼中自行設定加入 \n REM for Webots\nset PYTHON_PATH=%Disk%:\\Python313\n  \nREM for webots\nset  path_webots=%Disk%:\\Webots_2025a\\msys64\\mingw64\\bin;%Disk%:\\Webots_2025a\\msys64\\usr\\bin\n  \npath=%Disk%:;%path_python%;%path_git%;%path_copsim%;%path_msys2%;%path_miketex%;%path_flutter%;%path_node%;%path_tcc%;%path_postgresql%;%path_range%;%path_lua%;%path_core%;%path_putty%;%path_vscode%;%RUST_PATH%;%path_erlang%;%path_nodejs%;%path_haskell%;%path_scite%;%path_xsltproc%;%path_gnuplot%;%path_openssl%;%path_poppler%;%path_webots%;%path_blender%;%path%; \n 在開啟webots時系統會有跳出警告防火牆，其中一定要選擇允許，否則防火牆會擋 \n', 'tags': '', 'url': 'w6.html'}, {'title': 'w7', 'text': '因連假沒有上課，將當週的上課內容整理到此頁 \n slvs檔案： basket_ball_shooter.7z \n 繪製投球機零件影片： \n \n 投球機組合影片： \n \n 完整照片： \n \n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w8', 'text': '複習webots \xa0 SolidReference \xa0節點的用法說明，用在 Joint 節點的 endPoint 欄位中，用來指向一個現有的 Solid 或靜態環境  <static environment> 。通過這種方式，可以閉合機械迴圈。 \n 當指向一個 Solid 時，唯一的限制是 Solid 和 Joint 必須是某個共同上層 Solid 的下層。 \n 意思即是指 SolidReference 是一個引用類型，允許在 Joint 節點的 endPoint 欄位中指定某個目標。 \n', 'tags': '', 'url': 'w8.html'}, {'title': 'w9', 'text': '本週統整先前所完成的內容，並拍成影片，自評期望成績並填寫表單。 \n 前往 這裡 可以看到自己的期中期望成績、心得 \n', 'tags': '', 'url': 'w9.html'}, {'title': 'w10', 'text': '已知Webots2025a有bug，無法使用 Transform 節點和閃退的問題 ，因此可以下載 Webots2023b 版本。 \n 若想要擁有2025a的版本和2023b的版本可以在編輯器內將2025a的文字更改為2023b，並另存新檔即可。 \n \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w11', 'text': 'webots小組協同模擬及 fourbar_box複習 \n', 'tags': '', 'url': 'w11.html'}, {'title': 'w12', 'text': '本週開始需依照team上，在規定時間完成對應的HW、Exam等網頁內容，並在規定時間內完成表單填寫。', 'tags': '', 'url': 'w12.html'}, {'title': 'Tutorial', 'text': '', 'tags': '', 'url': 'Tutorial.html'}, {'title': 'Tutorial1', 'text': '練習webots使用方法， 熟悉 Webots 的使用者介面與基本概念 \n 操作影片： \n \n', 'tags': '', 'url': 'Tutorial1.html'}, {'title': 'Tutorial2', 'text': '引導課程2：修改環境 \n \n 學習修改地板： \n \n 內定的 RectangleArena PROTO 定義了一個簡單的地板，固定在靜態環境中，沒有物理節點，四周則被牆壁包圍。Webots 物件庫中還有其他預製的地板。我們現在將刪除 RectangleArena 節點，並添加一個簡單的地板，在場景樹視圖當中選擇並展開Floor。 修改size字段其調整為1mx1m。 \n \xa0\xa0\xa0\xa0\xa0\xa0 2.了解Solid節點的應用： \n Solid  節點代表剛體，即可以忽略變形的物體。剛體中任意兩點之間的距離無論外力如何作用，都保持恆定。例如桌子、機器人手指骨節或輪子都是剛體。軟體和關節物體不是剛體。例如繩子、輪胎、海綿或關節機器人手臂都不是剛體。然而，一個關節實體可以被分解成若干剛體。 \n \xa0\xa0\xa0\xa0\xa0\xa0 3.DEF-USE機制： \n DEF-USE 機制允許在一個地方定義一個節點，並在場景樹的其他地方重用該定義。這對於避免在世界文件中重複相同的節點非常有用。此外，它還允許用戶同時修改多個對象。其工作原理如下：首先使用 DEF 字符串標記一個節點。然後可以使用 USE 關鍵字在其他地方重用該節點的副本。只有 DEF 節點的字段可以編輯，USE 節點的字段繼承自 DEF 節點，無法更改。此機制依賴於世界文件中節點的順序。DEF 節點應在任何相應的 USE 節點之前定義。 \n 以下是影片： \n \n 因為後續軟體跳掉下面是後續結果： \n', 'tags': '', 'url': 'Tutorial2.html'}, {'title': 'task', 'text': '', 'tags': '', 'url': 'task.html'}, {'title': 'task1', 'text': '以下將要利用程式方法列出學員的作業倉儲與網頁連結, 以及各分組的倉儲及網站連結 \n 2a分組網站與倉儲 \n 2a尚未加入的成員 \n 上列程式已經給出當時已經參與分組的學員 Github 帳號，因此只需要從\xa0 https://mde.tw/list/2a.txt \xa0讀取學員的學號與 Github 帳號，並且在  for 迴圈 中，逐一用學員的 Github 帳號 相對於各班已經參與分組的學員  Github 帳號，並且列出特定學員的 Github 帳號不在前述已經參與分組的學員帳號數列中，即可 列出截至當時尚未那組的學員學號 。 \n # 甲班學員資料處理\nurl = "https://mde.tw/list/2a.txt"\ndata = open(url).readlines()\nall_stud = data[1:]\na_all_members = [\'41223154\', \'41271125\', \'41271158\', \'41271146\', \'41271131\', \'CYG41223103\', \'41223102\', \'41023128\', \'41023137\', \'41223137\', \'41223157\', \'41223156\', \'otakuyoyo\', \'41223141\', \'41223113\', \'kim41223114\', \'joeisme1208\', \'41223116\', \'41223144\', \'41223140\', \'41223143\', \'41223138\', \'41223134\', \'41223136\', \'zhe41223118\', \'Spirit0224\', \'yuhao-08\', \'41223158\', \'Ren911308\', \'41223150\', \'Manto8\', \'CYA41223106\', \'yan21ed\', \'Lin41223107\', \'41223133\', \'hong41223129\', \'41223110\', \'41223147\', \'Linjiahong41223125\', \'CHN41223132\', \'Yu-Fang-Hong\', \'41023111\', \'yckaooooo\', \'kolas911205\', \'41023105\', \'40932134\', \'41223104\', \'yan41223101\', \'41223105\', \'41223153\', \'41223120\', \'41223152\', \'G8People\', \'WSE41223112\', \'41223146\', \'41223119\']\n   \n# 顯示甲班標題\nprint("甲班:")\nfor i in all_stud:\n    drop_n = i.rstrip("\\n")\n    stud = drop_n.split("\\t")\n    stud_num = stud[0]\n    stud_github = stud[1]\n    if stud_github not in a_all_members:\n        print(stud_num) \n \n', 'tags': '', 'url': 'task1.html'}, {'title': 'task2', 'text': 'ssh協定執行作業倉儲的推送 \n 操作過程影片： \n \n 後方遺漏後續操作，以下補充說明： \n 匯出之後在可攜輸入 git clone --recurse-submodules\xa0mailto:git@(.ppk名稱):(倉儲帳號)/(倉儲分支名稱).git \n 再cms即可！ \n \n', 'tags': '', 'url': 'task2.html'}, {'title': 'task3', 'text': '繪圖檔案： 四連桿零件檔.7z \n 四連桿零件1~4繪圖過程： \n \n 四連桿零件5~7繪圖過程： \n \n 四連桿組合： \n \n', 'tags': '', 'url': 'task3.html'}, {'title': 'Homework', 'text': '作業 (30%) \n HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n part1: \n 請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置: \n 下載  portable_wcm2025.7z  (330MB, 解開壓縮後 1.4GB) \n Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB, 可單獨運作) \n Webots_2025a_web.7z  (171 MB, 解開壓縮後約為 1GB, 必須連網運作) \n Blender4.2.7z \n part2: \n 請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景. \n base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec. \n part3: \n 模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停. \n 參考資料: \n cd2025_hw1_demo.7z \n HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景. \n 參考資料: \n fourbar_slvs.7z \n HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 ( 參考影片 )後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統. \n 參考資料: \n 參考資料: \n fourbar_ball_throwing_linkage.slvs \n sixbar_ball_throwing_linkage.slvs \n \n', 'tags': '', 'url': 'Homework.html'}, {'title': 'HW1', 'text': 'HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號 \n 題目要求尺寸： 利用 box 幾何外形節點建立平面四連桿機構的模擬場景，要求地面 固定桿長度 1m ， 寬高各為 0.1m ， 第一桿長度 0.4m ， 第二桿長度 0.6m ， 第三桿長度 0.9m 。 \n 檔案： HW1-41223136.7z \n 第一部分：1~2連桿的影片 \n \n 第二部分：2~3連桿的影片 \n \n 第三部分：3~4連桿的影片 \n \n 第四部份：4~1連桿的影片 \n \n 後續須將馬達移除，只留一顆，並新增特殊條件(static environment)。 \n 心得 ：因為是初次操作webots，所以有點難上手，一不小心就會漏掉一個部分，就要重新檢查，連接joint~link的節點要很清楚是哪個桿件指向於到哪個，自己也要了解節點的位置和旋轉的rad方向，位置錯誤就有可能無法轉動等等 。 \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'HW2', 'text': 'HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號 \n \n 將 task3 繪製好的連桿件以程式切割後導入webots組配模擬(若使用舊版的可攜，需安裝 numpy 的套件否則無法執行，在可攜cmd輸入 pip install numpy ，學校網路因為防火牆可能無法下載，切換網路即可。) \n 檔案： HW2-41223136.7z \n  影片： \n \n 因後續閃退補後面過程： \n', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW3', 'text': 'HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號 \n \n 檔案： HW3-41223136.7z \n 影片： \n \n 後來調整角度和速度的影片： \n', 'tags': '', 'url': 'HW3.html'}, {'title': 'Midterm', 'text': '本課程所繳交的期中成績為學員自評之學習期望成績. \n 期中考週的自評期望成績繳交流程: \n \n 整理先前所完成的各週的進度、作業網頁內容以及心得 \n 拍攝期中自評影片, 上傳至 Youtube 後, 以" 國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號 "為影片標題後嵌入本頁面中 \n 回填期中自評表單 \n 上傳學員期中成績 \n \n 各週進度:可以從 這裡 來看各週的進度 \n 各週網頁內容: \n 第一週學習Python版本更新、列出各組的倉儲和網站 \n 第三週列出尚未加入分組的學員 \n 第四週ssh協定執行倉儲 \n 第五週學習webots概念 \n 第六週webots使用方法 \n 第七週利用solvespace繪製投籃機 \n 第八週複習webots節點使用方法 \n 期中心得:這學期的內容非常困難，我覺得最困難的地方是webots的使用，webots介面對我來說非常複雜，需要時間消化，雖然官網有教學，但也是要一步一步筆記下來才能了解webots的真正意涵，最主要是自己本身英文問題，有些單字甚至都沒看過，就需要一個一個翻譯了解其中意涵。 \n 期中自評影片: \n \n', 'tags': '', 'url': 'Midterm.html'}, {'title': 'Exam', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam2 (10%): 利用 CAD 零組件建立模擬場景\xa0 \n 各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam3 (20%): Webots 機電模擬場景的協同設計 \n 各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站. \n 協同分組方式: \n \n 分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁. \n \n', 'tags': '', 'url': 'Exam.html'}, {'title': 'Exam1', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n \n 題目： \n 其中紅色連桿為主動旋轉, 其旋轉速度設為 1.0 rad/s, 紅色連桿長度為 0.4m, 綠色連桿長度為 0.6m (短桿長度為 0.3m 基座位於長桿中央且與基座長桿重疊, ), 藍色連桿長度為 0.9m, 紅色連桿與藍色連桿距離則為 1m. \n 請學員將考試操作流程紀錄於作業網站中的 Exam1 頁面中, 並完成下列要求: \n \n 請詳細說明各連桿的製作流程, 利用 Solvespace 繪製當紅色連桿旋轉角度為個人學號最後兩碼時 (單位為 degree) 的線架構圖, 並將此角度作為四連桿的起始旋轉角度. \n 完成後, 請以" 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號 " 作為操作影片標題, 上傳至 Youtube 後在指定時段內回傳至指定表單. 並在個人作業倉儲中以 Exam1 頁面紀錄相關過程與心得. \n \n 檔案： 41223136-Exam1.7z \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0  41223136-Exam1-1.7z \n 影片： \n \n 以下是利用HW1製作Exam1的過程(有利用transform的方法)： \n \n 心得：經過HW1的練習，熟悉了box的用法，題目也說明了可以用solvespace事先繪製好零件之後，再利用程式切割配合blender就不用像HW1一樣要一個一個建立桿件，在後面提起了transform這個用法，他可以任意移動、旋轉，但pose這個方法也是可以的，他們差在transform可以任意移動而pose是一次指定所有物件的位置和姿態，學習到很多方法。', 'tags': '', 'url': 'Exam1.html'}, {'title': 'Exam2', 'text': 'Exam2 (10%): 利用 CAD 零組件建立模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號 \n \n 題目： \n 其中左側最短桿為主動旋轉, 其旋轉速度設為 1.0 rad/s, 最短桿的長度, 請依照個人學號的最後兩碼作為依據, 設為 1.xx m, 其中 xx 為 人學號的最後兩碼, 其餘各桿長度與固定軸間的距離可自行訂定, 惟 主動桿的起始旋轉角度 angle, 也請以個人學號的最後兩碼作為依據, 單位為 degree . \n 請學員將考試操作流程紀錄於作業網站中的 Exam2 頁面中, 並完成下列要求: \n \n 請詳細說明各連桿的製作流程, 其中包括 CAD 繪製與 Webots 模擬場景的設定與操作流程. \n 完成後, 請以" 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號 " 作為操作影片標題, 上傳至 Youtube 後在指定時段內回傳至指定表單. 並在個人作業倉儲中以 Exam2 頁面紀錄相關過程與心得. \n \n 檔案： 41223136-Exam2.7z \n 影片： \n \n 心得：從HW2和HW3的練習，做Exam2的考試就覺得簡單許多，了解角度和位置的用法就會非常簡單，但自己也要練習很多次才會了解webots真正的使用方法，有mesh的作法真的會比較簡單許多。', 'tags': '', 'url': 'Exam2.html'}, {'title': 'Exam3', 'text': 'Exam3 (20%): Webots 機電模擬場景的協同設計 \n \n 題目一：請每位學員利用在\xa0 https://mde.tw/cd2025/content/IPv6.html \xa0中所分配的個人 IPv6 網址, 以 webotsw --stream 啟動個人所完成的 HW1 模擬系統. 並在其餘組員的電腦上, 以瀏覽器檢視啟動串流學員伺服器上的機構模擬. 完成後請各學員將操作與設定說明過程拍成影片, 上傳至 Youtube, 影片標題:\xa0 " 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-1 - 學員學號 ". \n 檔案： 41223136-Exam3-1.7z \n 影片： \n \n 完整影片可以到 41223118 查看客戶端進行的方式 \n 以下是41223118作為伺服器 我這邊作為客戶端之過程影片： \n \n \n 題目二： 請每位學員利用\xa0 three_digit_counter.7z \xa0中的七段顯示器進行修改,\xa0以 webotsw --stream 啟動後, 可在其餘組員的電腦中, 透過瀏覽器檢視參與協同組員 Webots 中所展示的 學員學號 .\xa0完成後請各學員將操作與設定說明過程拍成影片, 上傳至 Youtube, 影片標題:\xa0" 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-2 - 學員學號 ". \n 檔案： 41223136-Exam3-2.7z \n 影片： \n \n 完整影片可以到 41223118 查看客戶端進行方式 \n 以下是41223118作為伺服器端 我作為客戶端的過程影片： \n \n \n 題目三： 請各組利用\xa0 youbot_cart_w10_websocket.7z \xa0中的 Youbot 底座平台, 由各組組長以 webotsw --stream 啟動後,\xa0可在其餘組員的電腦中, 透過 Websocket 客戶端程式控制平台車的前進、後退與左右轉.\xa0完成後請各學員將操作與設定說明過程拍成影片, 上傳至 Youtube, 影片標題:\xa0" 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-3 - 學員學號 ". \n 檔案： 41223136-Exam3-3.7z \n 影片： \n \n 可以到 41223118 查看伺服器操作過程 \n 心得：跟41223118一起完成Exam3的部分，在一開始做Exam3-1時，完全沒有頭緒，怎麼試都是錯誤沒辦法動煩惱非常久，在經過幾小時的奮戰終於做出來了，我們先看老師的檔案去問AI解釋每一段的意思，之後再改條件內容，經過我們的努力就做出來了，之後Exam3-2跟Exam3-3的部分就會比較簡單了，一點通了，後面做起來就會比較順利。 \n \n Exam3影片： \n', 'tags': '', 'url': 'Exam3.html'}, {'title': 'Final', 'text': '期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:  Webots 動態投籃模擬系統的協同設計 \n 說明:  \n 籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上. \n 操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止. \n 請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中. \n 影片標題:  國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題 \n', 'tags': '', 'url': 'Final.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};
>>>>>>> 34cc45080483539fdd32ca8eefd0f4702521e659
